{"version":3,"sources":["pages/multiplication-tab/initial-multiplication-tab-settings.ts","utils/process-local-storage/process-local-storage.ts","redux/multiplicationTable/multiplicationTabSlice.ts","components/math/randoms/get-random-integer-in-a-range.ts","components/math/problem-processing/get-input-position.ts","components/math/operands-generators/up-to-ten.ts","components/math/operands-generators/single-digit-operands.ts","components/math/operands-generators/two-and-single-digits.ts","components/math/operands-generators/two-digit-and-tens.ts","components/math/operands-generators/two-digit-operands.ts","components/math/operands-generators/two-digit-tidying-up.ts","components/math/operands-generators/tens-within-thousand.ts","components/math/operands-generators/hundreds-within-thousand.ts","components/math/problem-processing/operands-factory.ts","components/math/problem-processing/problems-factory.ts","components/math/problems-controller.ts","pages/addition-subtraction/initial-problem-settings.ts","redux/addition-subtraction/additionSubtractionSlice.ts","redux/store.ts","redux/hooks.ts","components/icons-svg/icon-chevron-down.component.tsx","components/collapsible/collapsible.component.tsx","components/descriptions/multiplication-table/how-multitab-works.component.tsx","components/toggler/toggler.component.tsx","components/headers/multiplication-tab/header.component.tsx","components/icons-svg/icon-heart.component.tsx","components/icons-svg/icon-lx-kish.component.tsx","components/footer/footer.component.tsx","table.content.ts","components/multiplication-tab/tab-header/tab-header.component.tsx","components/multiplication-tab/tab-empty-line/tab-empty-line.component.tsx","utils/handle-key-down-event/handle-key-down-event.ts","components/icons-svg/icon-circle.component.tsx","components/multiplication-tab/tab-cell/tab-cell.component.tsx","components/multiplication-tab/tab-empty-cell/tab-empty-cell.component.tsx","components/multiplication-tab/tab-line/tab-line.component.tsx","components/multiplication-tab/table/tab.component.tsx","components/navigation/burger icon/icon-burger.component.tsx","components/navigation/slide bar/slide-bar.component.tsx","components/navigation/siteMenu.ts","components/navigation/navigation-bar/navigation-bar.component.tsx","utils/get-node-offset-top/get-node-offset-top.ts","utils/use-window-size/use-window-size.ts","pages/multiplication-tab/multiplication-tab.page.tsx","components/settings/settings-missing/settings-missing.component.tsx","components/settings/settings-addition-subtraction/settings-addition-subtraction.component.tsx","components/settings/settings-types/settings-types.component.tsx","components/settings/settings-control-btns/settings-control-btns.component.tsx","components/addition-subtraction/types.ts","components/settings/settings.component.tsx","components/descriptions/math-theory/strategies/counting-on.component.tsx","components/descriptions/math-theory/strategies/make-a-ten.component.tsx","components/descriptions/math-theory/strategies/decomposing.component.tsx","components/descriptions/math-theory/strategies/equal-addition.component.tsx","components/descriptions/math-theory/strategies/compensation.component.tsx","components/descriptions/addition-subtraction/math.component.tsx","components/descriptions/addition-subtraction/problem-types/up-to-ten.component.tsx","components/descriptions/addition-subtraction/problem-types/single-digit-operands.component.tsx","components/descriptions/addition-subtraction/problem-types/two-and-single-digits.component.tsx","components/descriptions/addition-subtraction/problem-types/two-digit-and-tens.component.tsx","components/descriptions/addition-subtraction/problem-types/two-digit-operands.component.tsx","components/descriptions/addition-subtraction/problem-types/two-digit-tidying-up.component.tsx","components/descriptions/addition-subtraction/problem-types/tens-within-thousand.component.tsx","components/descriptions/addition-subtraction/problem-types/hundreds-within-thousand.component.tsx","components/descriptions/addition-subtraction/schema-arrows--small.png","components/descriptions/addition-subtraction/shcema-arrows--big.png","components/descriptions/addition-subtraction/how-addition-subtraction-works.component.tsx","components/headers/addition-subtraction/header.component.tsx","components/number/number.component.tsx","components/sign/sign.component.tsx","components/addition-subtraction/problem/problem.component.tsx","components/addition-subtraction/problems/problems.component.tsx","pages/addition-subtraction/addition-subtraction.page.tsx","routes.tsx","index.tsx"],"names":["initialMultiplicationTabSettings","getStorage","Storage","setItem","key","value","v","JSON","stringify","localStorage","getItem","isObject","item","parse","removeItem","initialState","subtract","values","multiplicationTabSlice","createSlice","name","reducers","setInputValue","state","action","payload","row","col","localStorageData","clearAllInputs","switchSubtract","actions","multiplicationTab","getRandomIntegerInARange","incomeMin","incomeMax","min","Math","ceil","max","floor","random","e","Error","message","getInputPosition","numberOfOperands","missing","input","randomInteger","upToTen","operation","zero","problemMaximum","operands","operand","problemSum","i","push","splice","length","singleDigitOperands","twoAndSingleDigits","sort","a","b","twoDigitAndTens","twoDigitOperands","twoDigitTidingUp","compensation","tensWithinThousand","tens","maxTens","hundredsWithinThousand","hundredsMax","hundredsLeft","hundreds","units","problemMin","problemMax","operandsFactory","type","twoDigitTidyngUp","tensWithinThousands","hundredsWithinThousands","problemsFactory","quantity","problem","processor","problems","q","toString","problemsController","problemDescriptions","forEach","initialProblemSettings","settings","columns","validProblemSettings","filter","setting","additionSubtractionSlice","index","currentValidSettings","clearAllProblemsAndSettings","generateProblems","insertSetting","newProblemSettings","slice","deleteSetting","changeSetting","additionSubtraction","store","configureStore","reducer","multiplicationTabReducer","additionSubtractionReducer","useAppDispatch","useDispatch","useAppSelector","useSelector","IconChevronDown","props","className","xmlns","width","height","viewBox","d","Collapsible","React","useState","display","setDisplay","useEffect","getDisplay","collapsibleClassName","id","borderBottom","titleClassName","title","checked","onChange","autoComplete","htmlFor","iconBoxClassName","iconClassName","content","HowMultitabWorks","paragraphClassName","Toggler","toggleBox","label","span","left","text","right","Header","subtractState","dispatch","IconHeart","IconLxKish","points","Footer","href","target","rel","TabContent","styles","TabHeader","Array","map","x","j","Fragment","EmptyLine","handleKeyDown","which","currentTarget","Number","isNaN","applyKeyDown","preventDefault","IconCircle","TabCell","memo","stateValues","lineIndex","line","colIndex","getRoundedHalfANumber","aNumber","round","getTopLineDotsAmount","pattern","inputMode","step","placeholder","onKeyDown","event","TabEmptyCell","sign","TabLine","Tab","IconBurger","open","setOpen","onClick","SlideBar","links","hideSliderMenu","link","to","element","showLinks","siteMenu","NavigationBar","document","body","classList","add","remove","getNodeOffsetTop","node","contains","offsetTop","useWindowSize","window","innerWidth","innerHeight","dimensions","setDimensions","useLayoutEffect","debouncedResizeHandler","fn","ms","timer","_","clearTimeout","setTimeout","apply","this","arguments","debounce","addEventListener","removeEventListener","MultiplicationTab","tabOffsetTop","tab","getElementById","headerTab","fonts","ready","then","scrollCallBack","scrolledDown","pageYOffset","setChecked","SettingsMissing","SettingsAdditionSubtraction","SettingsTypes","types","SettingsControlButtons","TaskTypes","ProblemSettings","stateSettings","CountingOn","MakeATen","Decomposing","EqualAddition","Compensation","UpToTen","SingleDigitOperands","TwoAndSingleDigits","TwoDigitAndTens","TwoDigitOperands","TwoDigitTidingUp","TensWithinThousand","HundredsWithinThousand","HowAdditionSubtractionWorks","srcSet","schemaSmallScreen","media","schemaBigScreen","alt","from","number","digit","parseInt","Sign","Problem","stateProblems","processKeyDown","handleChange","stateIndex","renderProblem","renderedElement","Problems","arr","cols","stateColumns","getContent","rows","idx","indexOf","AdditionSubtraction","Routes","path","exact","component","ReactDOM","render","StrictMode","basename","process"],"mappings":"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","file":"static/js/main.62faff7c.chunk.js","sourcesContent":["const initialMultiplicationTabSettings: string[][] = [\r\n  [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\r\n  [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\r\n  [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\r\n  [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\r\n  [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\r\n  [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\r\n  [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\r\n  [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\r\n  [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\r\n];\r\n\r\nexport default initialMultiplicationTabSettings;","export const getStorage = () => {\r\n  if (typeof Storage !== \"undefined\") {\r\n\r\n    return {\r\n      setItem: (key: string, value: string | Object): void => {\r\n        const v = typeof value === \"string\" ? value : JSON.stringify(value);\r\n        localStorage.setItem(key, v);\r\n      },\r\n      getItem: (key: string, isObject: boolean): any => {\r\n        const item = localStorage.getItem(key);\r\n        if (isObject && item) {\r\n          return JSON.parse(item);\r\n        }\r\n        return item;\r\n      },\r\n      removeItem: (key: string): void => {\r\n        localStorage.removeItem(key);\r\n      },\r\n      // clear: () => {\r\n      //   localStorage.clear();\r\n      // }\r\n    };\r\n  }\r\n  // return {}\r\n}","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../store';\r\n\r\nimport initialMultiplicationTabSettings from '../../pages/multiplication-tab/initial-multiplication-tab-settings';\r\n\r\nimport { getStorage } from '../../utils/process-local-storage/process-local-storage';\r\n\r\nexport interface IMultiplicationTabState {\r\n  subtract: boolean,\r\n  values: string[][],\r\n};\r\n\r\nconst initialState: IMultiplicationTabState = {\r\n  subtract: false,\r\n  values: getStorage()?.getItem(\"multiplicationTab\", true)?.values || initialMultiplicationTabSettings,\r\n};\r\n\r\nconst localStorageData = (state: IMultiplicationTabState) => {\r\n  return {\r\n    subtract: state.subtract,\r\n    values: JSON.parse(JSON.stringify(state.values)),\r\n  }\r\n}\r\n\r\nexport const multiplicationTabSlice = createSlice({\r\n  name: \"multiplicationTab\",\r\n  // `createSlice` will infer the state type from the `initialState` argument\r\n  initialState,\r\n  reducers: {\r\n    // 1) set input value\r\n    setInputValue: (state, action: PayloadAction<{ row: number; col: number; value: number }>) => {\r\n\r\n      let { row, col, value } = action.payload;\r\n\r\n      state.values[row][col] = \"\" + value || \"\";\r\n\r\n      getStorage()?.setItem(\"multiplicationTab\", localStorageData(state));\r\n    },\r\n    // 2) clear all input values\r\n    clearAllInputs: (state) => {\r\n      state.values = initialMultiplicationTabSettings;\r\n      getStorage()?.removeItem(\"multiplicationTab\");\r\n    },\r\n    // 3) switch subtract\r\n    switchSubtract: (state) => {\r\n      state.subtract = !state.subtract;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  setInputValue,\r\n  clearAllInputs,\r\n  switchSubtract,\r\n} = multiplicationTabSlice.actions;\r\n\r\nexport const selectMultiplicationTab = (state: RootState) => state.multiplicationTab;\r\nexport const subtract = (state: RootState) => state.multiplicationTab.subtract;\r\nexport const values = (state: RootState) => state.multiplicationTab.values;\r\n\r\nexport default multiplicationTabSlice;","/**\r\n * Algorithm of generating a whole random numbers in a specific range\r\n * \r\n * Based on discussion:\r\n * https://stackoverflow.com/questions/1527803/generating-random-whole-numbers-in-javascript-in-a-specific-range \r\n * \r\n * Returns a random integer between min (inclusive) and max (inclusive).\r\n * The value is no lower than min (or the next integer greater than min\r\n * if min isn't an integer) and no greater than max (or the next integer\r\n * lower than max if max isn't an integer).\r\n * Using Math.round() will give you a non-uniform distribution!\r\n */\r\nconst getRandomIntegerInARange = (incomeMin: number, incomeMax: number): number => {\r\n\r\n  try {\r\n    const min = Math.ceil(incomeMin);\r\n    const max = Math.floor(incomeMax);\r\n\r\n    const random = Math.floor(Math.random() * (max - min + 1)) + min;\r\n\r\n    return random;\r\n  }\r\n  catch (e: any) {\r\n    throw new Error(e.message);\r\n  }\r\n};\r\n\r\nexport default getRandomIntegerInARange;","import randomInteger from '../randoms/get-random-integer-in-a-range';\r\n\r\n/**\r\n * \r\n */\r\nconst getInputPosition = (numberOfOperands: number, missing: string) => {\r\n\r\n  try {\r\n\r\n    let input;\r\n\r\n    if (missing === 'random') {\r\n      input = randomInteger(0, numberOfOperands)\r\n    } else if (missing === 'first') {\r\n      input = 0;\r\n    } else if (missing === 'last') {\r\n      input = numberOfOperands - 1;\r\n    } else if (missing === 'result') {\r\n      input = numberOfOperands;\r\n    }\r\n\r\n    return input;\r\n  }\r\n  catch (e: any) {\r\n    throw new Error(e.message);\r\n  }\r\n};\r\n\r\nexport default getInputPosition;","import randomInteger from '../randoms/get-random-integer-in-a-range';\r\n\r\n/**\r\n * \r\n */\r\nconst upToTen = (operation: string, numberOfOperands: number) => {\r\n\r\n  try {\r\n\r\n    // to prevent a lot of randomized zeros generated\r\n    let zero = 1;\r\n\r\n    // 1. Generate problem maximum with limits min=0+numberOfOperands, max=10\r\n    const problemMaximum = randomInteger(0 + numberOfOperands, 10);\r\n\r\n    const operands: number[] = [];\r\n    let operand = 0;\r\n    let problemSum = 0;\r\n\r\n    // 2. Loop with length <numberOfOperands>-1\r\n    for (let i = 0; i < numberOfOperands - 1; i++) {\r\n\r\n      // 3. Generate operand with limits min=0 (or 1), max=sum-problemTotal\r\n      operand = randomInteger(zero, problemMaximum - problemSum);\r\n      problemSum += operand;\r\n\r\n      // 4. Push operand into problems array\r\n      operands.push(operand);\r\n\r\n      // changing zero value 0/1 for each tick\r\n      zero = 1 - zero;\r\n    }\r\n    operands.push(problemMaximum - problemSum);\r\n\r\n    // 5. Push the problem maximum value to the appropriate place depend on operation (addition/subtraction)\r\n    operands.splice(\r\n      operation === 'addition' ? operands.length : 0,\r\n      0,\r\n      problemMaximum\r\n    );\r\n\r\n    return operands;\r\n  }\r\n  catch (e: any) {\r\n    throw new Error(e.message);\r\n  }\r\n};\r\n\r\nexport default upToTen;","import randomInteger from '../randoms/get-random-integer-in-a-range';\r\n\r\n/**\r\n * \r\n */\r\nconst singleDigitOperands = (operation: string, numberOfOperands: number) => {\r\n\r\n  try {\r\n\r\n    // 1. Generate problem maximum with limits min=0+numberOfOperands, max=10\r\n    let problemMaximum = 0;\r\n\r\n    const operands: number[] = [];\r\n    let operand = 0;\r\n\r\n    // 2. Loop with length <numberOfOperands>-1\r\n    for (let i = 0; i < numberOfOperands; i++) {\r\n\r\n      // 3. Generate operand with limits min=0 (or 1), max=sum-problemTotal\r\n      operand = randomInteger(1, 9);\r\n      problemMaximum += operand;\r\n\r\n      // 4. Push operand into problems array\r\n      operands.push(operand);\r\n    }\r\n\r\n    // 5. Push the problem maximum value to the appropriate place depend on operation (addition/subtraction)\r\n    operands.splice(\r\n      operation === 'addition' ? operands.length : 0,\r\n      0,\r\n      problemMaximum\r\n    );\r\n\r\n    return operands;\r\n  }\r\n  catch (e: any) {\r\n    throw new Error(e.message);\r\n  }\r\n};\r\n\r\nexport default singleDigitOperands;","import randomInteger from '../randoms/get-random-integer-in-a-range';\r\n\r\n/**\r\n * \r\n */\r\nconst twoAndSingleDigits = (operation: string, numberOfOperands: number) => {\r\n\r\n  try {\r\n\r\n    // 1. Generate problem maximum with limits min=0+numberOfOperands, max=10\r\n    let problemMaximum = 0;\r\n\r\n    const operands: number[] = [];\r\n    let operand = 0;\r\n\r\n    // 2. Loop with length <numberOfOperands>-1\r\n    for (let i = 0; i < numberOfOperands; i++) {\r\n\r\n      // 3. Generate operand with limits min=0 (or 1), max=sum-problemTotal\r\n      if (i > 0) {\r\n        operand = randomInteger(1, 9);\r\n        problemMaximum += operand;\r\n      } else {\r\n        operand = randomInteger(11, 99);\r\n        problemMaximum += operand;\r\n      }\r\n\r\n      // 4. Push operand into problems array\r\n      operands.push(operand);\r\n    }\r\n\r\n    // in case of addition sort array to add less to the bigger\r\n    if (operation === 'subtraction') operands.sort((a, b) => a - b);\r\n\r\n    // 5. Push the problem maximum value to the appropriate place depend on operation (addition/subtraction)\r\n    operands.splice(\r\n      operation === 'addition' ? operands.length : 0,\r\n      0,\r\n      problemMaximum\r\n    );\r\n\r\n    return operands;\r\n  }\r\n  catch (e: any) {\r\n    throw new Error(e.message);\r\n  }\r\n};\r\n\r\nexport default twoAndSingleDigits;","import randomInteger from '../randoms/get-random-integer-in-a-range';\r\n\r\n/**\r\n * \r\n */\r\nconst twoDigitAndTens = (operation: string, numberOfOperands: number) => {\r\n\r\n  try {\r\n\r\n    // 1. Generate problem maximum with limits min=0+numberOfOperands, max=10\r\n    let problemMaximum = 0;\r\n\r\n    const operands: number[] = [];\r\n    let operand = 0;\r\n\r\n    // 2. Loop with length <numberOfOperands>-1\r\n    for (let i = 0; i < numberOfOperands; i++) {\r\n\r\n      // 3. Generate operand with limits min=0 (or 1), max=sum-problemTotal\r\n      if (i > 0) {\r\n        operand = randomInteger(1, 9) * 10;\r\n        problemMaximum += operand;\r\n      } else {\r\n        operand = randomInteger(11, 99);\r\n        problemMaximum += operand;\r\n      }\r\n\r\n      // 4. Push operand into problems array\r\n      operands.push(operand);\r\n    }\r\n\r\n    // in case of addition sort array to add less to the bigger\r\n    if (operation === 'subtraction') operands.sort((a, b) => a - b);\r\n\r\n    // 5. Push the problem maximum value to the appropriate place depend on operation (addition/subtraction)\r\n    operands.splice(\r\n      operation === 'addition' ? operands.length : 0,\r\n      0,\r\n      problemMaximum\r\n    );\r\n\r\n    return operands;\r\n  }\r\n  catch (e: any) {\r\n    throw new Error(e.message);\r\n  }\r\n};\r\n\r\nexport default twoDigitAndTens;","import randomInteger from '../randoms/get-random-integer-in-a-range';\r\n\r\n/**\r\n * \r\n */\r\nconst twoDigitOperands = (operation: string, numberOfOperands: number) => {\r\n\r\n  try {\r\n\r\n    // 1. Generate problem maximum with limits min=0+numberOfOperands, max=10\r\n    const problemMaximum = randomInteger(11 + numberOfOperands * 11, 99);\r\n\r\n    const operands: number[] = [];\r\n    let operand = 0;\r\n    let problemSum = 0;\r\n\r\n    // 2. Loop with length <numberOfOperands>-1\r\n    for (let i = 0; i < numberOfOperands - 1; i++) {\r\n\r\n      // 3. Generate operand with limits min=0 (or 1), max=sum-problemTotal\r\n      operand = randomInteger(11, problemMaximum - problemSum - 11);\r\n      problemSum += operand;\r\n\r\n      // 4. Push operand into problems array\r\n      operands.push(operand);\r\n    }\r\n\r\n    // in case of addition sort array to add less to the bigger\r\n    operands.push(problemMaximum - problemSum);\r\n\r\n    // 5. Push the problem maximum value to the appropriate place depend on operation (addition/subtraction)\r\n    operands.splice(\r\n      operation === 'addition' ? operands.length : 0,\r\n      0,\r\n      problemMaximum\r\n    );\r\n\r\n    return operands;\r\n  }\r\n  catch (e: any) {\r\n    throw new Error(e.message);\r\n  }\r\n};\r\n\r\nexport default twoDigitOperands;","import randomInteger from '../randoms/get-random-integer-in-a-range';\r\n\r\n/**\r\n * \r\n */\r\nconst twoDigitTidingUp = (operation: string, numberOfOperands: number) => {\r\n\r\n  try {\r\n\r\n    // 1. Generate problem maximum with limits min=0+numberOfOperands, max=10\r\n    let problemMaximum = 0;\r\n\r\n    const operands: number[] = [];\r\n    let operand = 0;\r\n\r\n    // 2. Loop with length <numberOfOperands>-1\r\n    for (let i = 0; i < numberOfOperands; i++) {\r\n\r\n      // 3. Generate operand with limits min=0 (or 1), max=sum-problemTotal\r\n      if (i > 0) {\r\n        // Getting compensation within of range from -3 to 3, distinctive from 0\r\n        let compensation;\r\n        while (!compensation) compensation = randomInteger(-3, 3);\r\n\r\n        operand = randomInteger(2, 9) * 10 - compensation;\r\n        problemMaximum += operand;\r\n      } else {\r\n        operand = randomInteger(11, 99);\r\n        problemMaximum += operand;\r\n      }\r\n\r\n      // 4. Push operand into problems array\r\n      operands.push(operand);\r\n    }\r\n\r\n    // in case of addition sort array to add less to the bigger\r\n    if (operation === 'subtraction') operands.sort((a, b) => a - b);\r\n\r\n    // 5. Push the problem maximum value to the appropriate place depend on operation (addition/subtraction)\r\n    operands.splice(\r\n      operation === 'addition' ? operands.length : 0,\r\n      0,\r\n      problemMaximum\r\n    );\r\n\r\n    return operands;\r\n  }\r\n  catch (e: any) {\r\n    throw new Error(e.message);\r\n  }\r\n};\r\n\r\nexport default twoDigitTidingUp;","import randomInteger from '../randoms/get-random-integer-in-a-range';\r\n\r\n/**\r\n * \r\n */\r\nconst tensWithinThousand = (operation: string, numberOfOperands: number) => {\r\n\r\n  try {\r\n\r\n    // 1. Generate problem maximum with limits min=0+numberOfOperands, max=10\r\n    let problemMaximum = 0;\r\n\r\n    const operands: number[] = [];\r\n    let operand = 0;\r\n\r\n    let hundreds = 0;\r\n    let tens = 0;\r\n    let units = 0;\r\n\r\n    // 2. Loop with length <numberOfOperands>-1\r\n    for (let i = 0; i < numberOfOperands; i++) {\r\n\r\n      // 3. Generate operand with limits min=0 (or 1), max=sum-problemTotal\r\n      if (i > 0) {\r\n\r\n        // Defining minimum tens to add or subtract for changing hundreds\r\n        const minTens = \r\n          operation === 'addition' ? \r\n            (10 - tens / 10) : \r\n            tens / 10 + 1;\r\n\r\n        operand = randomInteger(minTens, 9) * 10;\r\n        problemMaximum += operand;\r\n      } \r\n\r\n      if (i === 0) {\r\n        \r\n        // subtrahent should be more than minuend's tens\r\n        const maxTens = operation === 'subtraction' ? 7 : 9;\r\n        \r\n        hundreds = randomInteger(1, 8) * 100;\r\n        tens = randomInteger(1, maxTens) * 10;\r\n        units = randomInteger(1, 9);\r\n\r\n        operand = hundreds + tens + units;\r\n        problemMaximum += operand;\r\n      }\r\n\r\n      // 4. Push operand into problems array\r\n      operands.push(operand);\r\n    }\r\n\r\n    // in case of addition sort array to add less to the bigger\r\n    if (operation === 'subtraction') operands.sort((a, b) => a - b);\r\n\r\n    // 5. Push the problem maximum value to the appropriate place depend on operation (addition/subtraction)\r\n    operands.splice(\r\n      operation === 'addition' ? operands.length : 0,\r\n      0,\r\n      problemMaximum\r\n    );\r\n\r\n    return operands;\r\n  }\r\n  catch (e: any) {\r\n    throw new Error(e.message);\r\n  }\r\n};\r\n\r\nexport default tensWithinThousand;","import randomInteger from '../randoms/get-random-integer-in-a-range';\r\n\r\n/**\r\n * \r\n */\r\nconst hundredsWithinThousand = (operation: string, numberOfOperands: number) => {\r\n\r\n  try {\r\n\r\n    const operands: number[] = [];\r\n\r\n    let hundredsMax = 0;\r\n    let hundredsLowest = 0;\r\n    let hundredsHighest = 0;\r\n\r\n    let hundredsLeft = 0;\r\n\r\n    let hundreds = 0;\r\n    let operand = 0;\r\n\r\n    // 1. Generate maximum hundreds of the problem within the following boundaries:\r\n    operation === 'addition' ?\r\n      hundredsLowest = numberOfOperands :\r\n      hundredsLowest = 1;\r\n\r\n    hundredsMax = randomInteger(hundredsLowest, 9);\r\n\r\n    hundredsLeft = hundredsMax;\r\n\r\n    // 2. Loop with length <numberOfOperands>-1\r\n    for (let i = 0; i < numberOfOperands - 1; i++) {\r\n\r\n      // 3. Generate hundreds operands with limits:\r\n      operation === 'addition' ?\r\n        hundredsLowest = numberOfOperands - 1 :\r\n        hundredsLowest = 1;\r\n\r\n      operation === 'addition' ?\r\n        hundredsHighest = hundredsLeft - 1 :\r\n        hundredsHighest = hundredsLeft;\r\n\r\n      hundreds = randomInteger(hundredsLowest, hundredsHighest);\r\n\r\n      operand = hundreds * 100;\r\n      hundredsLeft -= hundreds;\r\n\r\n      // 4. Push operand into problems array\r\n      operands.push(operand);\r\n    }\r\n\r\n    let tens = randomInteger(0, 9) * 10;\r\n    let units = randomInteger(1, 9);\r\n    let problemMin = hundredsLeft * 100 + tens + units;\r\n    let problemMax = hundredsMax * 100 + tens + units;\r\n\r\n    // push the result value at the end depends on operation\r\n    operands.push(\r\n      operation === 'addition' ?\r\n        problemMax :\r\n        problemMin\r\n    );\r\n\r\n    // 5. Push the problem maximum value to the appropriate place depend on operation (addition/subtraction)\r\n    operands.splice(\r\n      0,\r\n      0,\r\n      operation === 'addition' ?\r\n        problemMin :\r\n        problemMax\r\n    );\r\n\r\n    return operands;\r\n  }\r\n  catch (e: any) {\r\n    throw new Error(e.message);\r\n  }\r\n};\r\n\r\nexport default hundredsWithinThousand;","import upToTen from '../operands-generators/up-to-ten';\r\nimport singleDigitOperands from '../operands-generators/single-digit-operands';\r\nimport twoAndSingleDigits from '../operands-generators/two-and-single-digits';\r\nimport twoDigitAndTens from '../operands-generators/two-digit-and-tens';\r\nimport twoDigitOperands from '../operands-generators/two-digit-operands';\r\nimport twoDigitTidyngUp from '../operands-generators/two-digit-tidying-up';\r\nimport tensWithinThousands from '../operands-generators/tens-within-thousand';\r\nimport hundredsWithinThousands from '../operands-generators/hundreds-within-thousand';\r\n\r\n/**\r\n * \r\n */\r\nconst operandsFactory = (type: string): (operation: string, numberOfOperands: number) => number[] => {\r\n\r\n  try {\r\n\r\n    if (type === 'up to ten') return upToTen;\r\n    if (type === 'single digit operands') return singleDigitOperands;\r\n    if (type === 'two- and single- digit') return twoAndSingleDigits;\r\n    if (type === 'two-digit and tens') return twoDigitAndTens;\r\n    if (type === 'two-digit operands') return twoDigitOperands;\r\n    if (type === 'two-digit tidying up') return twoDigitTidyngUp;\r\n    if (type === 'tens within thousand') return tensWithinThousands;\r\n    if (type === 'hundreds within thousand') return hundredsWithinThousands;\r\n    throw(new Error(`No processor found for case ${type}!`));\r\n\r\n  }\r\n  catch (e: any) {\r\n    throw new Error(e.message);\r\n  }\r\n};\r\n\r\nexport default operandsFactory;","import getInputPosition from './get-input-position';\r\nimport operandsFactory from './operands-factory';\r\n\r\n/**\r\n * \r\n */\r\nconst problemsFactory = (\r\n  type: string,\r\n  operation: string,\r\n  numberOfOperands = 2,\r\n  missing: string,\r\n  quantity: number\r\n) => {\r\n\r\n  try {\r\n\r\n    const processor: (operation: string, numberOfOperands: number) => number[] = operandsFactory(type);\r\n\r\n    let problems: { type: string; value: string }[][] = [];\r\n\r\n    let problem: { type: string; value: string }[];\r\n\r\n    for (let q = 0; q < quantity; q++) {\r\n\r\n      problem = [];\r\n\r\n      const operands: number[] = processor(operation, numberOfOperands);\r\n\r\n      // 6. Identify missing.\r\n      let input = getInputPosition(numberOfOperands, missing);\r\n\r\n      // 7. Formatting the problem with the defined operands and operator.\r\n      for (let i = 0; i < operands.length; i++) {\r\n\r\n        if (i > 0) {\r\n          problem.push({\r\n            type: \"sign\",\r\n            value: i === operands.length - 1 ?\r\n              \"=\" :\r\n              operation === \"addition\" ? \"+\" : \"-\"\r\n          });\r\n        }\r\n        problem.push({\r\n          type: input === i ? \"input\" : \"operand\",\r\n          value: operands[i].toString(),\r\n        });\r\n      }\r\n\r\n      problem.push({\r\n        type: \"result\",\r\n        value: \"\"\r\n      });\r\n\r\n      problems.push(problem);\r\n    }\r\n\r\n    return problems;\r\n  }\r\n  catch (e: any) {\r\n    throw new Error(e.message);\r\n  }\r\n};\r\n\r\nexport default problemsFactory;","import problemsFactory from './problem-processing/problems-factory';\r\n\r\nimport IAdditionSubtractionSetting from '../../TS/interfaces/IAdditionSubtractionSetting';\r\nimport IProblem from '../../TS/interfaces/IProblem';\r\n\r\n/**\r\n * \r\n */\r\nconst problemsController = (problemDescriptions: IAdditionSubtractionSetting[]): IProblem[][] => {\r\n\r\n  try {\r\n\r\n    const problems: IProblem[][] = [];\r\n    // const problems: { type: string; value: string }[][] = [];\r\n\r\n    problemDescriptions.forEach((type: IAdditionSubtractionSetting) => {\r\n\r\n      problems.push(...problemsFactory(\r\n        type.type,\r\n        type.operation,\r\n        type.numberOfOperands,\r\n        type.missing,\r\n        type.quantity\r\n      ));\r\n\r\n    });\r\n\r\n    return problems;\r\n  }\r\n  catch (e: any) {\r\n    throw new Error(e.message);\r\n  }\r\n};\r\n\r\nexport default problemsController;","import IAdditionSubtractionSetting from '../../TS/interfaces/IAdditionSubtractionSetting';\r\n\r\nconst initialProblemSettings: IAdditionSubtractionSetting[] = [\r\n  {\r\n    operation: 'addition',\r\n    type: 'up to ten',\r\n    missing: 'random',\r\n    numberOfOperands: 2,\r\n    quantity: 8\r\n  }\r\n];\r\n\r\nexport default initialProblemSettings;","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../store';\r\n\r\nimport problemsController from '../../components/math/problems-controller';\r\n\r\nimport { getStorage } from '../../utils/process-local-storage/process-local-storage';\r\n\r\nimport IAdditionSubtractionSetting from '../../TS/interfaces/IAdditionSubtractionSetting';\r\nimport IProblem from '../../TS/interfaces/IProblem';\r\n\r\nimport initialProblemSettings from '../../pages/addition-subtraction/initial-problem-settings';\r\n\r\nexport interface AdditionSubtractionState {\r\n  settings: IAdditionSubtractionSetting[],\r\n  columns: number,\r\n  problems: IProblem[][],\r\n}\r\n\r\nconst initialState: AdditionSubtractionState = {\r\n  settings: getStorage()?.getItem(\"additionSubtraction\", true)?.settings || initialProblemSettings,\r\n  columns: 2,\r\n  problems: getStorage()?.getItem(\"additionSubtraction\", true)?.problems || problemsController(initialProblemSettings),\r\n};\r\n\r\nconst localStorageData = (state: AdditionSubtractionState, settings: IAdditionSubtractionSetting[]) => {\r\n  return {\r\n    settings,\r\n    columns: state.columns,\r\n    problems: JSON.parse(JSON.stringify(state.problems)),\r\n  }\r\n}\r\n\r\nconst validProblemSettings = (state: AdditionSubtractionState): IAdditionSubtractionSetting[] => {\r\n  return state.settings.filter(\r\n    // const validProblemSettings = action.payload.filter(\r\n    (setting: IAdditionSubtractionSetting) => setting.operation && setting.type && setting.missing && setting.quantity\r\n  );\r\n}\r\n\r\nexport const additionSubtractionSlice = createSlice({\r\n  name: 'additionSubtraction',\r\n  // `createSlice` will infer the state type from the `initialState` argument\r\n  initialState,\r\n  reducers: {\r\n    // 1) set input value\r\n    setInputValue: (state, action: PayloadAction<{ index: number, value: string }>) => {\r\n      const { index, value } = action.payload;\r\n      state.problems[index][5].value = \"\" + value;\r\n      \r\n      const currentValidSettings = validProblemSettings(state);\r\n\r\n      getStorage()?.setItem(\"additionSubtraction\", localStorageData(state, currentValidSettings));\r\n    },\r\n    // 2) clear all locally saved problems and settings\r\n    clearAllProblemsAndSettings: (state) => {\r\n      getStorage()?.removeItem(\"additionSubtraction\");\r\n    },\r\n    // 3) generate problems\r\n    generateProblems: (state) => {\r\n      // generateProblems: (state, action: PayloadAction<IAdditionSubtractionSetting[]>) => {\r\n      const currentValidSettings = validProblemSettings(state);\r\n\r\n      const problems = problemsController(currentValidSettings);\r\n\r\n      state.problems = problems;\r\n\r\n      if (problems.length) getStorage()?.setItem(\"additionSubtraction\", localStorageData(state, currentValidSettings));\r\n\r\n      if (!problems.length) getStorage()?.removeItem(\"additionSubtraction\");\r\n    },\r\n    // 4) insert setting\r\n    insertSetting: (state, action: PayloadAction<number>) => {\r\n\r\n      const newProblemSettings: IAdditionSubtractionSetting[] = [\r\n        ...state.settings.slice(0, action.payload + 1),\r\n        {\r\n          operation: 'addition',\r\n          type: '',\r\n          missing: 'random',\r\n          numberOfOperands: 2,\r\n          quantity: 0\r\n        },\r\n        ...state.settings.slice(action.payload + 1)\r\n      ];\r\n\r\n      state.settings = newProblemSettings;\r\n    },\r\n    // 5) delete setting\r\n    deleteSetting: (state, action: PayloadAction<number>) => {\r\n      const newProblemSettings = [...state.settings.slice(0, action.payload), ...state.settings.slice(action.payload + 1)];\r\n\r\n      if (!newProblemSettings.length)\r\n        newProblemSettings.push({\r\n          operation: 'addition',\r\n          type: '',\r\n          missing: 'random',\r\n          numberOfOperands: 2,\r\n          quantity: 0\r\n        });\r\n\r\n      state.settings = newProblemSettings;\r\n    },\r\n    // 6) set setting on change\r\n    changeSetting: (state, action: PayloadAction<{ index: number; name: string; value: string }>) => {\r\n      const newProblemSettings = [...state.settings];\r\n      const { index, name, value } = action.payload;\r\n\r\n      newProblemSettings[index] = {\r\n        ...newProblemSettings[index],\r\n        [name]: value,\r\n      };\r\n\r\n      state.settings = newProblemSettings;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  setInputValue,\r\n  clearAllProblemsAndSettings,\r\n  generateProblems,\r\n  insertSetting,\r\n  deleteSetting,\r\n  changeSetting,\r\n} = additionSubtractionSlice.actions;\r\n\r\nexport const selectAdditionSubtraction = (state: RootState) => state.additionSubtraction;\r\nexport const settings = (state: RootState) => state.additionSubtraction.settings;\r\nexport const columns = (state: RootState) => state.additionSubtraction.columns;\r\nexport const problems = (state: RootState) => state.additionSubtraction.problems;\r\n\r\nexport default additionSubtractionSlice;","import { configureStore } from '@reduxjs/toolkit'\r\n\r\nimport multiplicationTabReducer from './multiplicationTable/multiplicationTabSlice';\r\nimport additionSubtractionReducer from './addition-subtraction/additionSubtractionSlice';\r\n// import settingsReducer from './settingsProcessing/settingsProcessing';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    multiplicationTab: multiplicationTabReducer.reducer,\r\n    additionSubtraction: additionSubtractionReducer.reducer,\r\n    // settingsState: settingsReducer.reducer,\r\n  }\r\n});\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport type { RootState, AppDispatch } from './store';\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;","import React from 'react';\r\n\r\ninterface IProps {\r\n    className: string;\r\n};\r\n\r\nconst IconChevronDown: React.FC<IProps> = props => {\r\n\r\n    return (\r\n        <svg className={props.className} xmlns=\"http://www.w3.org/2000/svg\" width=\"28\" height=\"28\" viewBox=\"0 0 28 28\" >\r\n            <path d=\"M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z\" />\r\n        </svg>\r\n    )\r\n};\r\n\r\nexport default IconChevronDown;","import React from 'react';\r\n\r\nimport IconChevronDown from '../icons-svg/icon-chevron-down.component';\r\n\r\ninterface IProps {\r\n\tid: string;\r\n\tcontent?: JSX.Element | string;\r\n\tborderBottom?: boolean;\r\n\tcollapsibleClassName: string;\r\n\ttitleClassName?: string;\r\n\ttitle?: string;\r\n\ticonBoxClassName?: string;\r\n\ticonClassName: string;\r\n\tgetDisplay?: (display: boolean) => boolean;\r\n};\r\n\r\nconst Collapsible: React.FC<IProps> = (props) => {\r\n\r\n\tconst [display, setDisplay] = React.useState(false);\r\n\r\n\t/**\r\n\t * React hook useEffect for sending up the state in case it is needed\r\n\t */\r\n\tReact.useEffect(() => {\r\n\r\n\t\tif (props?.getDisplay) props.getDisplay(display);\r\n\r\n\t}, [display]);\r\n\r\n\tconst handleChange = () => {\r\n\t\tsetDisplay(!display);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={props?.collapsibleClassName} key={props.id}>\r\n\t\t\t<div className={`collapsible__line${props.borderBottom ? \" collapsible__border-bottom\" : \"\"}`}>\r\n\t\t\t\t<h3 className={props?.titleClassName}>{props.title}</h3>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype=\"checkbox\"\r\n\t\t\t\t\tclassName=\"collapsible__btn\"\r\n\t\t\t\t\tid={props.id}\r\n\t\t\t\t\tchecked={display}\r\n\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\tautoComplete=\"off\" //for dropping the value when cached by browser\r\n\t\t\t\t/>\r\n\t\t\t\t<label htmlFor={props.id} className={props?.iconBoxClassName}>\r\n\t\t\t\t\t<IconChevronDown className={props.iconClassName} />\r\n\t\t\t\t</label>\r\n\t\t\t</div>\r\n\t\t\t<div className={`description ${display ? \"collapsible--expanded\" : \"collapsible--collapsed\"}`}>\r\n\t\t\t\t{props.content}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Collapsible;\r\n","import React from 'react';\r\n\r\nimport ICollapsibleProps from '../../../TS/interfaces/ICollapsibleProps';\r\n\r\nconst HowMultitabWorks: React.FC<ICollapsibleProps> = (props) => {\r\n\treturn (\r\n\t\t<p className={props.paragraphClassName}>\r\n\t\t\tThis part of the application helps kids to discover the meaning of the term \"multiplication\" which is an\r\n\t\t\taddition of a number to itself several times:<br />\r\n\t\t\t2 x 4 (two times four) = 2 + 2 + 2 + 2.<br />\r\n\t\t\t<br />\r\n\t\t\tThe application consists of the table with input fields, which should be filled with correct values. A\r\n\t\t\tcorrect value displays as <b>white</b> and an incorrect as{' '}\r\n\t\t\t<span className=\"red\">\r\n\t\t\t\t<b>red</b>\r\n\t\t\t</span>.<br />\r\n\t\t\t<br />\r\n\t\t\tTable contains 9 rows of fields, each row represents a number for addition. First row represents 2, and the next are\r\n\t\t\tincreasing by 1 sequentially up to 10. Table contains 9 columns of fields, each column represents a number,\r\n\t\t\tstarting from 2 with the same sequence up to 10. Depending on the Addition/Subtraction toggle status, numbers of the columns are\r\n\t\t\tsequentially increasing or decreasing by 1.<br />\r\n\t\t\t<br />\r\n\t\t\tIn case Addition is selected, the row starts with the base number of the row, and the input value is the sum of\r\n\t\t\tthe previous input value and the base number of the current row. For example, in the row of \"3\" all the field\r\n\t\t\tvalues differ from each other by 3: the row starts from the base number of 3, so the next field value is 6 (3 +\r\n\t\t\t3), followed by 9 (6 + 3), followed by 12 (9 + 3), and so on.<br />\r\n\t\t\t<br />\r\n\t\t\tIn case Subtraction is selected, the row starts with the base number of the row times 10, and the input value is\r\n\t\t\tthe difference between the previous input value and the base number of the row. For example, in the row of \"6\"\r\n\t\t\tthe first field value is 60 (6 x 10), the next is 54 (60 - 6), followed by 48 (54 - 6), and so on.<br />\r\n\t\t\t<br />\r\n\t\t\tTo make it ease to count for kids there are colored dots under each field, the number of the dots is equal to the\r\n\t\t\tbase number of the row. It alowes to count the number in the next field using 'Count On' method for counting\r\n\t\t\tdots, for example 6 + 3 like \"7, 8, 9\", instead of performing mental addition. Dots are colored differently to prevent merging.\r\n\t\t</p>\r\n\t);\r\n};\r\n\r\nexport default HowMultitabWorks;\r\n","import React from 'react';\r\n\r\ninterface IProps {\r\n    checked: boolean;\r\n    onChange: () => void;\r\n    toggleBox: { \r\n        className: string;\r\n    };\r\n    label: {\r\n        htmlFor: string;\r\n        span: { \r\n            left: {\r\n                className: string;\r\n                text: string;\r\n            };\r\n            right: {\r\n                className: string;\r\n                text: string;\r\n            };\r\n        };\r\n    };\r\n    input: { };\r\n};\r\n\r\nconst Toggler: React.FC<IProps> = props => {\r\n\r\n    return (\r\n        <div className={props.toggleBox.className}>\r\n            <label htmlFor={props.label.htmlFor}>\r\n                <span className={props.label.span.left.className}>{props.label.span.left.text}</span>\r\n                <input\r\n                    {...props.input}\r\n                    checked={props.checked}\r\n                    onChange={props.onChange}\r\n                />\r\n                <span className={props.label.span.right.className}>{props.label.span.right.text}</span>\r\n            </label>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Toggler;","import React from 'react';\r\n\r\nimport { useAppSelector, useAppDispatch } from '../../../redux/hooks';\r\nimport {\r\n\tclearAllInputs,\r\n\tswitchSubtract,\r\n\tsubtract,\r\n} from '../../../redux/multiplicationTable/multiplicationTabSlice';\r\n\r\nimport Collapsible from '../../collapsible/collapsible.component';\r\nimport HowMultitabWorks from '../../descriptions/multiplication-table/how-multitab-works.component';\r\n\r\nimport Toggler from '../../toggler/toggler.component';\r\n\r\ninterface IProps {\r\n\tgetDisplay: (display: boolean) => boolean;\r\n\tsetChecked: () => void;\r\n};\r\n\r\nconst content = {\r\n\ttogglerAddSubtract: {\r\n\t\ttoggleBox: {\r\n\t\t\tclassName: \"add-subtract-toggle__box\"\r\n\t\t},\r\n\t\tlabel: {\r\n\t\t\thtmlFor: \"addition-subtraction\",\r\n\t\t\tspan: {\r\n\t\t\t\tleft: {\r\n\t\t\t\t\tclassName: \"toggler description__paragraph--level-three\",\r\n\t\t\t\t\ttext: \"addition\"\r\n\t\t\t\t},\r\n\t\t\t\tright: {\r\n\t\t\t\t\tclassName: \"toggler description__paragraph--level-two\",\r\n\t\t\t\t\ttext: \"subtraction\"\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\tinput: {\r\n\t\t\ttype: \"checkbox\",\r\n\t\t\tclassName: \"add-subtract-toggle__input\",\r\n\t\t\tid: \"addition-subtraction\"\r\n\t\t}\r\n\t}\r\n};\r\n\r\nconst Header: React.FC<IProps> = (props) => {\r\n\r\n\tconst subtractState = useAppSelector(subtract);\r\n\r\n\tconst dispatch = useAppDispatch();\r\n\r\n\tconst handleChange = () => {\r\n\t\tdispatch(clearAllInputs());\r\n\t\tdispatch(switchSubtract());\r\n\t};\r\n\r\n\treturn (\r\n\t\t<header className=\"header header--multiplication-tab\">\r\n\t\t\t<h1 className=\"header__title\">Multiplication table</h1>\r\n\t\t\t<h3 className=\"header__title--small\">learn multiplication using addition and subtraction</h3>\r\n\t\t\t<Collapsible\r\n\t\t\t\ttitle=\"How it works\"\r\n\t\t\t\tid=\"multitable-usage\"\r\n\t\t\t\tcollapsibleClassName=\"collapsible collapsible__border-bottom\"\r\n\t\t\t\ttitleClassName=\"collapsible__title collapsible__title--level-one\"\r\n\t\t\t\ticonBoxClassName=\"collapsible__icon-box collapsible__icon-box--level-one\"\r\n\t\t\t\ticonClassName=\"collapsible__icon--level-one\"\r\n\t\t\t\tgetDisplay={props.getDisplay} // I know that it's a bad music... Just d'know how to do better, and don't want to launch Redux just for this shit... :(\r\n\t\t\t\tcontent={\r\n\t\t\t\t\t<HowMultitabWorks\r\n\t\t\t\t\t\tparagraphClassName=\"description__paragraph description__paragraph--level-two\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t}\r\n\t\t\t\tborderBottom={false}\r\n\t\t\t/>\r\n\t\t\t<Toggler\r\n\t\t\t\t{...content.togglerAddSubtract}\r\n\t\t\t\tchecked={subtractState}\r\n\t\t\t\tonChange={handleChange}\r\n\t\t\t/>\r\n\t\t</header>\r\n\t);\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\ninterface IProps {\r\n    className: string;\r\n};\r\n\r\nconst IconHeart: React.FC<IProps> = props => {\r\n\r\n    return (\r\n        <svg className={props.className} xmlns=\"http://www.w3.org/2000/svg\" width=\"28\" height=\"28\" viewBox=\"0 0 28 28\" >\r\n            <path d=\"M23.6 2c-3.363 0-6.258 2.736-7.599 5.594-1.342-2.858-4.237-5.594-7.601-5.594-4.637 0-8.4 3.764-8.4 8.401 0 9.433 9.516 11.906 16.001 21.232 6.13-9.268 15.999-12.1 15.999-21.232 0-4.637-3.763-8.401-8.4-8.401z\" />\r\n        </svg>\r\n    )\r\n};\r\n\r\nexport default IconHeart;","import React from 'react';\r\n\r\ninterface IProps {\r\n    className: string;\r\n};\r\n\r\nconst IconLxKish: React.FC<IProps> = props => {\r\n\r\n    return (\r\n        <svg className={props.className} xmlns=\"http://www.w3.org/2000/svg\" width=\"28\" height=\"28\" viewBox=\"0 0 60 60\" aria-labelledby=\"title\">\r\n            <title id=\"title\">Lx Kish Logo</title>\r\n            <polygon points=\"1 8 8 1 8 52 59 52 52 59 1 59\" />\r\n            <polygon points=\"15.75 13.5 22.5 6.75 52.25 36.5 45.5 43.25\" />\r\n            <polygon points=\"15.75 36.5 45.5 6.75 52.25 13.5 22.5 43.25\" />\r\n        </svg>\r\n    )\r\n};\r\n\r\nexport default IconLxKish;","import React from 'react';\r\n\r\nimport IconHeart from '../icons-svg/icon-heart.component';\r\nimport IconLxKish from '../icons-svg/icon-lx-kish.component';\r\n\r\nconst Footer: React.FC = () => {\r\n\treturn (\r\n\t\t<footer className=\"footer\">\r\n\t\t\t<p className=\"footer__version\">v4.0.1</p>\r\n\t\t\t<p className=\"footer__credentials\">\r\n\t\t\t\t&#169; 2020 - 2022. Built with\r\n\t\t\t\t<span className=\"footer__icon-box\">\r\n\t\t\t\t\t<IconHeart className=\"footer__icon red\" />\r\n\t\t\t\t</span>\r\n\t\t\t\tby\r\n\t\t\t\t<a\r\n\t\t\t\t\tclassName=\"footer__link\"\r\n\t\t\t\t\thref=\"https://lx-kish.github.io/personal-web-page/\"\r\n\t\t\t\t\ttarget=\"_blank\"\r\n\t\t\t\t\trel=\"noopener noreferrer\"\r\n\t\t\t\t>\r\n\t\t\t\t\t<span className=\"footer__icon-box\">\r\n\t\t\t\t\t\t<IconLxKish className=\"footer__icon seven\" />\r\n\t\t\t\t\t</span>\r\n\t\t\t\t\tAlexander Kish\r\n\t\t\t\t</a>\r\n\t\t\t</p>\r\n\t\t</footer>\r\n\t);\r\n};\r\n\r\nexport default Footer;\r\n","type TStyles = { \r\n\tstyles: {\r\n        [key: number]: string;\r\n    };\r\n};\r\n\r\nconst TabContent: TStyles = {\r\n    styles: {\r\n        0: 'zero',\r\n        1: 'one',\r\n        2: 'two',\r\n        3: 'three',\r\n        4: 'four',\r\n        5: 'five',\r\n        6: 'six',\r\n        7: 'seven',\r\n        8: 'eight',\r\n        9: 'nine',\r\n        10: 'ten'\r\n    }\r\n\r\n}\r\n\r\nexport default TabContent;","import React from 'react';\r\n\r\nimport { useAppSelector } from '../../../redux/hooks';\r\nimport {\r\n    subtract,\r\n} from '../../../redux/multiplicationTable/multiplicationTabSlice';\r\n\r\nimport content from '../../../table.content';\r\n\r\ninterface IProps {\r\n    id: string;\r\n};\r\n\r\nconst TabHeader: React.FC<IProps> = props => {\r\n   \r\n    const subtractState = useAppSelector(subtract);\r\n\r\n    /**\r\n     * Returns mathematical sign for addition or subtraction\r\n     * @return {html entity} sign code\r\n     */\r\n     const getSign = (): any => {\r\n        return subtractState ? <>&#x2212;</> : <>&#x2b;</>\r\n    }\r\n\r\n    return (\r\n\r\n        <div className='tab__line--header' id={props.id}>\r\n            <div className='tab__heading-cell tab__heading-cell--side'>&#xa0;</div>\r\n            {[...Array(11)].map((x, i) => {\r\n                let j = subtractState ? 10 - i : i\r\n                if (j > 1) {\r\n                    return (\r\n                        <React.Fragment key={j}>\r\n                            <div className='tab__empty-cell tab__empty-cell--head'>{getSign()}</div>\r\n                            <div className={`tab__heading-cell ${content.styles[j]}`}>{j}</div>\r\n                        </React.Fragment>\r\n                    )\r\n                }\r\n                else return null;\r\n            }\r\n            )}\r\n            <div className='tab__heading-cell tab__heading-cell--side'>&#xa0;</div>\r\n        </div>\r\n\r\n    )\r\n};\r\n\r\nexport default TabHeader;","import React from 'react';\r\n\r\ninterface IProps {};\r\n\r\nconst EmptyLine: React.FC<IProps> = props => {\r\n\r\n    return (\r\n        <div className='tab__line--empty-stick'>\r\n            <div className='tab__heading-cell tab__heading-cell--side'>{\" \"}</div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default EmptyLine;","\r\n/**\r\n * Handles key-down event, runs key validation, \r\n * decline input of the key if invalid\r\n * @param  {event} e a key down event\r\n * \r\n * @return {void}\r\n */\r\nconst handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n\r\n  /**\r\n   * Validate a key down event for the range of criteria\r\n   * @param  {event} e a key down event\r\n   * @return {boolean} validation state\r\n   */\r\n  const applyKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n\r\n    /**\r\n     * arrows up & down are allways denied\r\n     * to prevent choosing right answer from keyboard \r\n     */\r\n    if (e.which === 38 || e.which === 40) {\r\n      return true;\r\n    }\r\n\r\n    /** delete, backspace and tab are always allowed \r\n     */\r\n    if (\r\n      e.which === 8 || //backspace\r\n      e.which === 46 || //delete\r\n      e.which === 9 || //tab\r\n      e.which === 37 || //<- arrow\r\n      e.which === 39 //-> arrow\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    /** more than 2 digits in a 2-digits fields,\r\n     * more than 3 digits in a 3-digits field\r\n     * instant return to prevent overflowing\r\n     */\r\n    if (e.currentTarget.value.length > e.currentTarget.max.length - 1) {\r\n      return true;\r\n    }\r\n\r\n    /** https://stackoverflow.com/questions/13196945/keycode-values-for-numeric-keypad/13196983\r\n     * The problem with keyCode is to avoid the combined keys\r\n     * with the numbers on top of keyboard, we must add a check\r\n     *  on the key \"Shift\" and \"Alt\" to avoid special characters\r\n     * such as e @ & \" { } ...\r\n     */\r\n    let key = Number(e.key);\r\n    if (isNaN(key) || e.key === null || e.key === ' ') {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  if (applyKeyDown(e)) {\r\n    e.preventDefault();\r\n  }\r\n};\r\n\r\nexport default handleKeyDown;","import React from 'react';\r\n\r\ninterface IProps {\r\n    className: string;\r\n};\r\n\r\nconst IconCircle: React.FC<IProps> = props => {\r\n\r\n    return (\r\n        <svg className={props.className} xmlns=\"http://www.w3.org/2000/svg\" width=\"28\" height=\"28\" viewBox=\"0 0 28 28\" >\r\n            <path d=\"M24 14c0 6.625-5.375 12-12 12s-12-5.375-12-12 5.375-12 12-12 12 5.375 12 12z\" />\r\n        </svg>\r\n    )\r\n};\r\n\r\nexport default IconCircle;","import React from 'react';\r\n\r\nimport { useAppSelector, useAppDispatch } from '../../../redux/hooks';\r\nimport {\r\n\tsetInputValue,\r\n\tvalues,\r\n} from '../../../redux/multiplicationTable/multiplicationTabSlice';\r\n\r\nimport handleKeyDown from '../../../utils/handle-key-down-event/handle-key-down-event';\r\nimport IconCircle from '../../icons-svg/icon-circle.component';\r\n\r\nimport content from '../../../table.content';\r\n\r\ninterface IProps {\r\n\tline: number;\r\n\tcol: number;\r\n\tvalue: number;\r\n\t// input: string;\r\n};\r\n\r\nconst TabCell: React.FC<IProps> = React.memo((props) => {\r\n\r\n\tconst dispatch = useAppDispatch();\r\n\r\n\tconst stateValues = useAppSelector(values);\r\n\t// const { line, col } = props;\r\n\r\n\tconst lineIndex = props.line - 2;\r\n\tconst colIndex = props.col - 2;\r\n\r\n\t/**\r\n\t\t * Rounds half a number to a bigger whole digit\r\n\t\t * @return {Number} amount of dots on the top line\r\n\t\t */\r\n\tconst getRoundedHalfANumber = (aNumber: number): number => {\r\n\t\treturn Math.round(aNumber / 2);\r\n\t};\r\n\r\n\t/**\r\n\t\t * Split the amount of dots into 2 lines if amount bigger than 2\r\n\t\t * @return {Number} amount of dots on the top line\r\n\t\t */\r\n\tconst getTopLineDotsAmount = () => {\r\n\t\treturn props.line > 2 ? getRoundedHalfANumber(props.line) : props.line;\r\n\t};\r\n\r\n\t/**\r\n\t\t * Returns an Input className, all Inputs have the same,\r\n\t\t * except Input for 100\r\n\t\t * @return {String} className for Input field\r\n\t\t */\r\n\tconst getInputClassName = () => {\r\n\t\treturn props.value < 100 ? 'component__input' : 'component__input component__input--hundreed';\r\n\t};\r\n\r\n\t/**\r\n\t\t * Calls redux action on value change\r\n\t\t * @return {void}\r\n\t\t */\r\n\tconst handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n\t\tdispatch(setInputValue({ row: lineIndex, col: colIndex, value: + e.currentTarget.value }));\r\n\t}\r\n\r\n\t/**\r\n\t\t * Calls redux action on value change\r\n\t\t * @return {void}\r\n\t\t */\r\n\tconst getDefaultValue = (): string => {\r\n\t\t// const value = \"\" + stateValues[lineIndex][colIndex];\r\n\t\treturn stateValues[lineIndex][colIndex];\r\n\t\t// return value || \"\";\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"component\">\r\n\t\t\t<div className=\"component__input-box\">\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype=\"number\"\r\n\t\t\t\t\tpattern=\"[0-9]*\"\r\n\t\t\t\t\tinputMode=\"numeric\"\r\n\t\t\t\t\tstep=\"1\"\r\n\t\t\t\t\ttitle=\"\"\r\n\t\t\t\t\tplaceholder=\" \"\r\n\t\t\t\t\tmin={props.value}\r\n\t\t\t\t\tmax={props.value}\r\n\t\t\t\t\tclassName={getInputClassName()}\r\n\t\t\t\t\tonKeyDown={(event) => handleKeyDown(event)}\r\n\t\t\t\t\tonChange={(event) => handleChange(event)}\r\n\t\t\t\t\tvalue={getDefaultValue()}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"component__score\">\r\n\t\t\t\t<div className=\"component__score-row\">\r\n\t\t\t\t\t{[...Array(getTopLineDotsAmount())].map((x, i) => (\r\n\t\t\t\t\t\t<IconCircle key={i} className={`component__icon ${content.styles[i + 1]}`} />\r\n\t\t\t\t\t))}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"component__score-row\">\r\n\t\t\t\t\t{[...Array(props.line - getTopLineDotsAmount())].map((x, i) => (\r\n\t\t\t\t\t\t<IconCircle\r\n\t\t\t\t\t\t\tkey={i + getRoundedHalfANumber(props.line)}\r\n\t\t\t\t\t\t\tclassName={`component__icon ${content.styles[i + 1 + getRoundedHalfANumber(props.line)]}`}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n});\r\n\r\nexport default TabCell;\r\n","import React from 'react';\r\n\r\ninterface IProps {\r\n    className: string;\r\n    sign?: Element | any;\r\n};\r\n\r\nconst TabEmptyCell: React.FC<IProps> = props => {\r\n\r\n    return (\r\n        <div className={props.className}>{props?.sign}</div>\r\n    )\r\n};\r\n\r\nexport default TabEmptyCell;","import React from 'react';\r\n\r\nimport { useAppSelector } from '../../../redux/hooks';\r\nimport {\r\n    subtract,\r\n} from '../../../redux/multiplicationTable/multiplicationTabSlice';\r\n\r\nimport content from '../../../table.content';\r\n\r\nimport TabCell from '../tab-cell/tab-cell.component';\r\nimport TabEmptyCell from '../tab-empty-cell/tab-empty-cell.component';\r\n\r\ninterface IProps {\r\n    className: string;\r\n    subtract: boolean;\r\n    sign: string;\r\n    value: number;\r\n};\r\n\r\nconst TabLine: React.FC<IProps> = props => {\r\n\r\n    const subtractState = useAppSelector(subtract);\r\n\r\n    /**\r\n     * Returns mathematical sign for addition or subtraction\r\n     * @return {html entity} sign code\r\n     */\r\n    const getSign = (): any => {\r\n        return subtractState ? <>&#x2212;</> : <>&#x2b;</>\r\n    }\r\n\r\n    return (\r\n        <div className={`tab__line ${props.className}`}>\r\n            <div className={`tab__heading-cell tab__heading-cell--side ${content.styles[props.value]}`}>{props.value}</div>\r\n            {[...Array(11)].map((x, i) => {\r\n                let j = subtractState ? 10 - i : i\r\n                if (j > 1) {\r\n                    return (\r\n                        <React.Fragment key={j}>\r\n                            <TabEmptyCell\r\n                                className='tab__empty-cell'\r\n                                sign={i >= 1 ? getSign() : ''}\r\n                            />\r\n                            <TabCell\r\n                                line={props.value}\r\n                                col={j}\r\n                                value={j * props.value}\r\n                            />\r\n                        </React.Fragment>\r\n                    )\r\n                }\r\n                else return null;\r\n            }\r\n            )}\r\n            <div className={`tab__heading-cell tab__heading-cell--side ${content.styles[props.value]}`}>{props.value}</div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default TabLine;","import React from 'react';\r\n\r\nimport { useAppSelector } from '../../../redux/hooks';\r\nimport {\r\n    subtract,\r\n} from '../../../redux/multiplicationTable/multiplicationTabSlice';\r\n\r\nimport content from '../../../table.content';\r\n\r\nimport TabHeader from '../tab-header/tab-header.component';\r\nimport TabEmptyLine from '../tab-empty-line/tab-empty-line.component';\r\nimport TabLine from '../tab-line/tab-line.component';\r\n\r\ninterface IProps {};\r\n\r\nconst Tab: React.FC<IProps> = props => {\r\n   \r\n    const subtractState = useAppSelector(subtract);\r\n\r\n    /**\r\n     * Returns mathematical sign for addition or subtraction\r\n     * @return {html entity} sign code\r\n     */\r\n     const getSign = (): any => {\r\n        return subtractState ? <>&#x2212;</> : <>&#x2b;</>\r\n    }\r\n    \r\n    return (\r\n        <section className=\"tab\" id=\"tab\">\r\n            <TabHeader\r\n                id={\"header-stick\"}\r\n            />\r\n            <TabEmptyLine />\r\n            {[...Array(11)].map((x, i) =>\r\n                i > 1 ?\r\n                    <TabLine\r\n                        key={i}\r\n                        className={content.styles[i]}\r\n                        value={i}\r\n                        subtract={subtractState}\r\n                        sign={getSign()}\r\n                    />\r\n                    : null\r\n            )}\r\n            <TabHeader\r\n                id={\"\"}\r\n            />\r\n        </section>\r\n    )\r\n};\r\n\r\nexport default Tab;","import React from \"react\";\r\n\r\ninterface IProps {\r\n  open: boolean;\r\n  setOpen: () => void;\r\n};\r\n\r\nconst IconBurger: React.FC<IProps> = ({ open, setOpen }) => {\r\n\r\n  return (\r\n    <div\r\n      className={`burger${open ? ' is-active' : ''}`}\r\n      onClick={setOpen}\r\n    >\r\n      <span className=\"line\" />\r\n      <span className=\"line\" />\r\n      <span className=\"line\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default IconBurger;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\ninterface IProps {\r\n\topen: boolean;\r\n\tlinks: { link: string; className: string; name: string; }[];\r\n\thideSliderMenu: () => void;\r\n};\r\n\r\nconst SlideBar: React.FC<IProps> = ({ open, links, hideSliderMenu }) => {\r\n\tconst element = (link: { link: string; className: string; name: string; }, i: number) => (\r\n\t\t<Link key={i} to={link.link} className={`slide-bar__item ${link.className}`} onClick={() => hideSliderMenu()}>\r\n\t\t\t{link.name}\r\n\t\t</Link>\r\n\t);\r\n\r\n\tconst showLinks = (links: IProps[\"links\"]) =>\r\n\t\tlinks.map((link, i) => {\r\n\t\t\treturn element(link, i);\r\n\t\t});\r\n\r\n\treturn <nav className={`slide-bar${open ? ' is-active' : ''}`}>{showLinks(links)}</nav>;\r\n};\r\n\r\nexport default SlideBar;\r\n","type TMenuLinks = {\r\n  name: string;\r\n  link: string;\r\n  className: string;\r\n}[];\r\n\r\nconst siteMenu: TMenuLinks = [\r\n  {\r\n    name: 'Multiplication table',\r\n    link: '/multiplication-tab',\r\n    className: ''\r\n  },\r\n  {\r\n    name: 'Addition and Subtraction',\r\n    link: '/addition-subtraction',\r\n    className: ''\r\n  },\r\n];\r\n\r\nexport default siteMenu;","import React from 'react';\r\n\r\nimport BurgerIcon from '../burger icon/icon-burger.component';\r\nimport SlideBar from '../slide bar/slide-bar.component';\r\n\r\nimport siteMenu from '../siteMenu';\r\n\r\ninterface IProps { };\r\n\r\nconst NavigationBar: React.FC<IProps> = (props) => {\r\n\t/**\r\n\t * Application navigation menu component\r\n\t * \r\n\t * \r\n\t */\r\n\r\n\tconst [open, setOpen] = React.useState(false);\r\n\r\n\t/**\r\n\t * React hook useEffect for prevent body from scrolling on open modal \r\n\t */\r\n\tReact.useEffect(() => {\r\n\t\tif (open) document.body.classList.add('body-fixed');\r\n\t\tif (!open) document.body.classList.remove('body-fixed');\r\n\t}, [open]);\r\n\r\n\treturn (\r\n\t\t<div className=\"navigation\">\r\n\t\t\t<div className={`navigation__bg${open ? ' is-active' : ''}`} onClick={() => setOpen(false)} />\r\n\t\t\t<BurgerIcon open={open} setOpen={() => setOpen(!open)} />\r\n\t\t\t<SlideBar open={open} links={siteMenu} hideSliderMenu={() => setOpen(false)} />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default NavigationBar;\r\n","/**\r\n * Gets and returns offsetTop of the element\r\n * @node {Object} element who's offsetTop should be returned\r\n * @return {Number} offsetTop\r\n * \r\n * For detailed explanations of checking the existance of node see:\r\n * https://stackoverflow.com/questions/5629684/how-can-i-check-if-an-element-exists-in-the-visible-dom/\r\n */\r\nconst getNodeOffsetTop = (node: HTMLElement): number => {\r\n  \r\n  if (!document.body.contains(node)) {\r\n    return -1;\r\n  }\r\n  return node.offsetTop;\r\n};\r\n\r\nexport default getNodeOffsetTop;","import React from 'react';\r\n\r\n/**\r\n * \r\n * @returns {dimensions} [window.innerWidth, window.innerHeight] - the dimentions of the browser window\r\n * \r\n * More details at:\r\n * https://stackoverflow.com/questions/19014250/rerender-view-on-browser-resize-with-react\r\n * \r\n */\r\nconst useWindowSize = (): number[] => {\r\n\r\n  const [dimensions, setDimensions] = React.useState([\r\n    window.innerWidth,\r\n    window.innerHeight,\r\n  ]);\r\n\r\n  React.useLayoutEffect(() => {\r\n    const debouncedResizeHandler = debounce(() => {\r\n      setDimensions([window.innerWidth, window.innerHeight]);\r\n    }, 100); // 100ms\r\n    window.addEventListener('resize', debouncedResizeHandler);\r\n    debouncedResizeHandler({});\r\n    return () => window.removeEventListener('resize', debouncedResizeHandler);\r\n  }, []);\r\n  return dimensions;\r\n};\r\n\r\nfunction debounce(fn: any, ms: number) {\r\n  let timer: any;\r\n  return function(_: any) {\r\n    clearTimeout(timer);\r\n    timer = setTimeout(function(this: void, _: any) {\r\n      timer = null;\r\n      fn.apply(this, arguments);\r\n    }, ms);\r\n  };\r\n};\r\n\r\nexport default useWindowSize;","import React from 'react';\r\n\r\nimport Header from '../../components/headers/multiplication-tab/header.component';\r\nimport Footer from '../../components/footer/footer.component';\r\nimport Tab from '../../components/multiplication-tab/table/tab.component';\r\n\r\nimport NavigationBar from '../../components/navigation/navigation-bar/navigation-bar.component';\r\n\r\nimport getNodeOffsetTop from '../../utils/get-node-offset-top/get-node-offset-top';\r\nimport useWindowSize from '../../utils/use-window-size/use-window-size';\r\n\r\ninterface IProps { };\r\n\r\nconst MultiplicationTab: React.FC<IProps> = props => {\r\n\r\n    /**\r\n     * Single state hook useState for all the state properties\r\n     */\r\n    const [display, setDisplay] = React.useState(false);\r\n    // const [fullState, setFullState] = React.useState({\r\n    //     display: false,\r\n    //     // subtract: false,\r\n    //     // open: false\r\n    // });\r\n\r\n    const dimensions = useWindowSize();\r\n\r\n    /**\r\n    * \r\n    * @param {Boolean} display - passing parameter from the settings component\r\n    * \r\n    * For details see: \r\n    * https://stackoverflow.com/questions/40722382/how-to-pass-state-back-to-parent-in-react\r\n    */\r\n    const getDisplay = (display: boolean): any => {\r\n\r\n        setDisplay(display);\r\n    };\r\n\r\n    /**\r\n     * React hook useEffect for stick header on scrolling\r\n     */\r\n    React.useEffect(() => {\r\n\r\n        const tab: any = document.getElementById('tab');\r\n        const headerTab: any = document.getElementById('header-stick');\r\n\r\n        let tabOffsetTop: number;\r\n\r\n        (document as any).fonts.ready.then(() => {\r\n            tabOffsetTop = getNodeOffsetTop(tab);\r\n        });\r\n\r\n        const scrollCallBack: any = window.addEventListener('scroll', () => {\r\n\r\n            if (tab && headerTab) {\r\n\r\n                const scrolledDown = window.pageYOffset >= tabOffsetTop;\r\n\r\n                if (scrolledDown) headerTab.classList.add('sticky');\r\n                if (!scrolledDown) headerTab.classList.remove('sticky');\r\n            }\r\n        });\r\n\r\n        return () => {\r\n            window.removeEventListener('scroll', scrollCallBack);\r\n        };\r\n    }, [display, dimensions]);\r\n\r\n    return (\r\n        <>\r\n            <NavigationBar />\r\n            <main className='main'>\r\n                <Header\r\n                    getDisplay={getDisplay}\r\n                    setChecked={() =>\r\n                        setDisplay(!display)\r\n                    }\r\n                />\r\n                <Tab />\r\n            </main>\r\n            <Footer />\r\n        </>\r\n    )\r\n};\r\n\r\nexport default MultiplicationTab;","import React from 'react';\r\n\r\nimport { useAppDispatch } from '../../../redux/hooks';\r\nimport {\r\n\tchangeSetting,\r\n} from '../../../redux/addition-subtraction/additionSubtractionSlice';\r\n\r\nimport IAdditionSubtractionSetting from '../../../TS/interfaces/IAdditionSubtractionSetting';\r\n\r\ninterface IProps {\r\n\tindex: number,\r\n\tsetting: IAdditionSubtractionSetting,\r\n};\r\n\r\nconst SettingsMissing: React.FC<IProps> = (props: IProps): JSX.Element => {\r\n\r\n\tconst dispatch = useAppDispatch();\r\n\r\n\treturn (\r\n\t\t<div className=\"settings__control settings__control--radio\">\r\n\t\t\t<input\r\n\t\t\t\ttype=\"radio\"\r\n\t\t\t\tid={`first-${props.index}`}\r\n\t\t\t\tname={`missing-${props.index}`}\r\n\t\t\t\tvalue=\"first\"\r\n\t\t\t\tclassName=\"settings__input\"\r\n\t\t\t\tonChange={() => dispatch(changeSetting({ index: props.index, name: \"missing\", value: \"first\" }))}\r\n\t\t\t\tchecked={props.setting.missing === \"first\"}\r\n\t\t\t/>\r\n\t\t\t<label htmlFor={`first-${props.index}`}>first</label>\r\n\t\t\t<input\r\n\t\t\t\ttype=\"radio\"\r\n\t\t\t\tid={`last-${props.index}`}\r\n\t\t\t\tname={`missing-${props.index}`}\r\n\t\t\t\tvalue=\"last\"\r\n\t\t\t\tclassName=\"settings__input\"\r\n\t\t\t\tonChange={() => dispatch(changeSetting({ index: props.index, name: \"missing\", value: \"last\" }))}\r\n\t\t\t\tchecked={props.setting.missing === \"last\"}\r\n\t\t\t/>\r\n\t\t\t<label htmlFor={`last-${props.index}`}>last</label>\r\n\t\t\t<input\r\n\t\t\t\ttype=\"radio\"\r\n\t\t\t\tid={`result-${props.index}`}\r\n\t\t\t\tname={`missing-${props.index}`}\r\n\t\t\t\tvalue=\"result\"\r\n\t\t\t\tclassName=\"settings__input\"\r\n\t\t\t\tonChange={() => dispatch(changeSetting({ index: props.index, name: \"missing\", value: \"result\" }))}\r\n\t\t\t\tchecked={props.setting.missing === \"result\"}\r\n\t\t\t/>\r\n\t\t\t<label htmlFor={`result-${props.index}`}>result</label>\r\n\t\t\t<input\r\n\t\t\t\ttype=\"radio\"\r\n\t\t\t\tid={`random-${props.index}`}\r\n\t\t\t\tname={`missing-${props.index}`}\r\n\t\t\t\tvalue=\"random\"\r\n\t\t\t\tclassName=\"settings__input\"\r\n\t\t\t\tonChange={() => dispatch(changeSetting({ index: props.index, name: \"missing\", value: \"random\" }))}\r\n\t\t\t\tchecked={props.setting.missing === \"random\"}\r\n\t\t\t/>\r\n\t\t\t<label htmlFor={`random-${props.index}`}>random</label>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default SettingsMissing;\r\n","import React from 'react';\r\n\r\nimport { useAppDispatch } from '../../../redux/hooks';\r\nimport {\r\n  changeSetting,\r\n} from '../../../redux/addition-subtraction/additionSubtractionSlice';\r\n\r\nimport IAdditionSubtractionSetting from '../../../TS/interfaces/IAdditionSubtractionSetting';\r\n\r\ninterface IProps {\r\n\tindex: number,\r\n\tsetting: IAdditionSubtractionSetting,\r\n};\r\n\r\nconst SettingsAdditionSubtraction: React.FC<IProps> = (props: IProps): JSX.Element => {\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  return (\r\n    <div className=\"settings__control settings__control--radio\">\r\n      <input\r\n        type=\"radio\"\r\n        id={`addition-${props.index}`}\r\n        name={`operation-${props.index}`}\r\n        value=\"addition\"\r\n        className=\"settings__input\"\r\n        onChange={() => dispatch(changeSetting({ index: props.index, name: \"operation\", value: \"addition\" }))}\r\n        checked={props.setting.operation === \"addition\"}\r\n      />\r\n      <label htmlFor={`addition-${props.index}`}>addition</label>\r\n      <input\r\n        type=\"radio\"\r\n        id={`subtraction-${props.index}`}\r\n        name={`operation-${props.index}`}\r\n        value=\"subtraction\"\r\n        className=\"settings__input\"\r\n        onChange={() => dispatch(changeSetting({ index: props.index, name: \"operation\", value: \"subtraction\" }))}\r\n        checked={props.setting.operation === \"subtraction\"}\r\n      />\r\n      <label htmlFor={`subtraction-${props.index}`}>subtraction</label>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SettingsAdditionSubtraction;\r\n","import React from 'react';\r\n\r\nimport { useAppDispatch } from '../../../redux/hooks';\r\nimport {\r\n\tchangeSetting,\r\n} from '../../../redux/addition-subtraction/additionSubtractionSlice';\r\n\r\nimport IAdditionSubtractionSetting from '../../../TS/interfaces/IAdditionSubtractionSetting';\r\n\r\ninterface IProps {\r\n\tindex: number,\r\n\tsetting: IAdditionSubtractionSetting,\r\n\ttypes: string[]\r\n};\r\n\r\nconst SettingsTypes: React.FC<IProps> = (props: IProps): JSX.Element => {\r\n\r\n\tconst dispatch = useAppDispatch();\r\n\r\n\treturn (\r\n\t\t<div className=\"settings__control\">\r\n\t\t\t<label htmlFor=\"settings-type\" className=\"settings__label\">\r\n\t\t\t\tType:\r\n\t\t\t</label>\r\n\t\t\t<select\r\n\t\t\t\tname=\"type\"\r\n\t\t\t\tid=\"settings-type\"\r\n\t\t\t\tclassName=\"settings__select\"\r\n\t\t\t\tvalue={props.setting.type}\r\n\t\t\t\tonChange={(event) => dispatch(changeSetting({ index: props.index, name: \"type\", value: event.target.value }))}\r\n\t\t\t>\r\n\t\t\t\t<option >\r\n\t\t\t\t\t-- select --\r\n\t\t\t\t</option>\r\n\t\t\t\t{props.types.map((type, i) => (\r\n\t\t\t\t\t<option\r\n\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\tvalue={type}\r\n\t\t\t\t\t\tclassName=\"settings__option\"\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{type}\r\n\t\t\t\t\t</option>\r\n\t\t\t\t))}\r\n\t\t\t</select>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default SettingsTypes;\r\n","import React from 'react';\r\n\r\nimport { useAppDispatch } from '../../../redux/hooks';\r\nimport {\r\n\tinsertSetting,\r\n\tdeleteSetting,\r\n} from '../../../redux/addition-subtraction/additionSubtractionSlice';\r\n\r\ninterface IProps {\r\n  index: number,\r\n};\r\n\r\nconst SettingsControlButtons: React.FC<IProps> = (props: IProps): JSX.Element => {\r\n\r\n\tconst dispatch = useAppDispatch();\r\n\r\n\treturn (\r\n    <div className=\"settings__control settings__control--btns\">\r\n      <input\r\n        type=\"button\"\r\n        value=\"+\"\r\n        className=\"btn settings__control-btn\"\r\n        onClick={() => dispatch(insertSetting(props.index))}\r\n        title=\"add line\"\r\n      />\r\n      <input\r\n        type=\"button\"\r\n        value=\"&times;\"\r\n        className=\"btn settings__control-btn\"\r\n        onClick={() => dispatch(deleteSetting(props.index))}\r\n        title=\"remove line\"\r\n      />\r\n    </div>\r\n\t);\r\n};\r\n\r\nexport default SettingsControlButtons;\r\n","type TTypes = string[];\r\n\r\nconst TaskTypes: TTypes = [\r\n  'up to ten', // 2 + 3 = 5; 6 - 4 = 2\r\n  'single digit operands', // 8 + 7 = 15; 9 - 3 = 6 \r\n  'two- and single- digit', // 23 + 9 = 32; 17 - 8 = 9\r\n  'two-digit and tens', // 23 + 10 = 33; 56 - 20 = 36\r\n  'two-digit operands', // 75 + 46 = 121; 85 - 37 = 48\r\n  'two-digit tidying up', // 89 + 93 = 182; 79 - 32 = 47\r\n  'tens within thousand', // 374 + 60 = 434; 347 - 60 = 287\r\n  'hundreds within thousand', // 374 + 200 = 574; 574 - 200 = 374\r\n  // 'three-digit operands', // 374 + 782 = 1156; 774 - 382 = 392\r\n  // 'three-digit tiding up', // 498 + 703 = 1201; 703 - 498 = 205\r\n  // 'tens within thousand',\r\n];\r\n\r\nexport default TaskTypes;","import React from 'react';\r\n\r\nimport { useAppSelector, useAppDispatch } from '../../redux/hooks';\r\nimport {\r\n\tgenerateProblems,\r\n\tchangeSetting,\r\n\tsettings,\r\n} from '../../redux/addition-subtraction/additionSubtractionSlice';\r\n\r\nimport Collapsible from '../collapsible/collapsible.component';\r\n\r\nimport SettingsMissing from './settings-missing/settings-missing.component';\r\n\r\nimport SettingsAdditionSubtraction from './settings-addition-subtraction/settings-addition-subtraction.component';\r\n\r\nimport SettingsTypes from './settings-types/settings-types.component';\r\n\r\nimport SettingsControlButtons from './settings-control-btns/settings-control-btns.component';\r\n\r\nimport handleKeyDown from '../../utils/handle-key-down-event/handle-key-down-event';\r\n\r\nimport types from '../addition-subtraction/types';\r\n\r\ninterface IProps {\r\n\r\n};\r\n\r\nconst ProblemSettings: React.FC<IProps> = (props: IProps): JSX.Element => {\r\n\r\n\tconst stateSettings = useAppSelector(settings);\r\n\r\n\tconst dispatch = useAppDispatch();\r\n\r\n\tconst collapsibleContent = () => {\r\n\t\treturn (\r\n\t\t\t<div className=\"settings__settings-group\">\r\n\t\t\t\t{stateSettings.map((setting, index) => (\r\n\t\t\t\t\t<div className=\"settings__setting\" key={index}>\r\n\t\t\t\t\t\t<div className=\"settings__col\">\r\n\t\t\t\t\t\t\t<SettingsAdditionSubtraction index={index} setting={setting} />\r\n\t\t\t\t\t\t\t<SettingsMissing index={index} setting={setting} />\r\n\t\t\t\t\t\t\t<SettingsTypes index={index} setting={setting} types={types}/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"settings__col\">\r\n\t\t\t\t\t\t\t<div className=\"settings__control\">\r\n\t\t\t\t\t\t\t\t<label htmlFor=\"settings-quantity\" className=\"settings__label\">\r\n\t\t\t\t\t\t\t\t\tQty:\r\n\t\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\ttype=\"number\"\r\n\t\t\t\t\t\t\t\t\tpattern=\"[0-9]*\"\r\n\t\t\t\t\t\t\t\t\tinputMode=\"numeric\"\r\n\t\t\t\t\t\t\t\t\tstep=\"1\"\r\n\t\t\t\t\t\t\t\t\ttitle=\"\"\r\n\t\t\t\t\t\t\t\t\tplaceholder=\" \"\r\n\t\t\t\t\t\t\t\t\tname=\"quantity\"\r\n\t\t\t\t\t\t\t\t\tmin=\"1\"\r\n\t\t\t\t\t\t\t\t\tmax=\"100\"\r\n\t\t\t\t\t\t\t\t\tclassName=\"settings__input\"\r\n\t\t\t\t\t\t\t\t\tvalue={setting.quantity}\r\n\t\t\t\t\t\t\t\t\tonChange={(event) => dispatch(changeSetting({ index, name: \"quantity\", value: event.target.value }))}\r\n\t\t\t\t\t\t\t\t\tonKeyDown={(event) => handleKeyDown(event)}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<SettingsControlButtons index={index} />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"settings\">\r\n\t\t\t<Collapsible\r\n\t\t\t\ttitle=\"Settings\"\r\n\t\t\t\tid=\"settings\"\r\n\t\t\t\tcontent={collapsibleContent()}\r\n\t\t\t\tcollapsibleClassName=\"collapsible collapsible__border-bottom\"\r\n\t\t\t\ttitleClassName=\"collapsible__title collapsible__title--level-one\"\r\n\t\t\t\ticonBoxClassName=\"collapsible__icon-box collapsible__icon-box--level-one\"\r\n\t\t\t\ticonClassName=\"collapsible__icon--level-one\"\r\n\t\t\t\tborderBottom={false}\r\n\t\t\t/>\r\n\t\t\t<input\r\n\t\t\t\ttype=\"button\"\r\n\t\t\t\tclassName=\"btn settings__go-btn\"\r\n\t\t\t\tvalue=\"Generate\"\r\n\t\t\t\tonClick={() => dispatch(generateProblems())}\r\n\t\t\t// onClick={() => dispatch(generateProblems(stateSettings))}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default ProblemSettings;\r\n","import React from 'react';\r\n\r\nimport ICollapsibleProps from '../../../../TS/interfaces/ICollapsibleProps';\r\n\r\nconst CountingOn: React.FC<ICollapsibleProps> = (props) => {\r\n\treturn (\r\n\t\t<p className={props.paragraphClassName}>\r\n\t\t\tCounting On is a beginning mental math strategy, using both for addition and for subtraction.<br />\r\n\t\t\tIn addition, first, find the biggest number in an equation. Then count up until adding the lowest number. For\r\n\t\t\texample, in the equation<br />\r\n\t\t\t<span className=\"description__paragraph--level-one\">4 + 3</span>\r\n\t\t\t<br />\r\n\t\t\tstart with the 4 in the head, and then count up, \"5, 6, 7.\" This is important to start count from 4, but not\r\n\t\t\tlike, \"1, 2, 3, 4...5, 6, 7.\" It also introduces the commutative property of addition, which says that changing\r\n\t\t\tthe order of addends does not change the sum. So if an equation looks like this<br />\r\n\t\t\t<span className=\"description__paragraph--level-one\">2 + 6</span>\r\n\t\t\t<br />\r\n\t\t\tit still should start with the bigger number (in this case, 6) and count up: \"7, 8.\"<br />\r\n\t\t\t<br />\r\n\t\t\tIn subtraction, simple count down from the biggest number in an equation until subtracting the lowest number,\r\n\t\t\topposite to the counting up in addition. For example, in the equation<br />\r\n\t\t\t<span className=\"description__paragraph--level-one\">5 - 3</span>\r\n\t\t\t<br />\r\n\t\t\tstart with the 5 in the head, and then count down: \"4, 3, 2.\"\r\n\t\t</p>\r\n\t);\r\n};\r\n\r\nexport default CountingOn;\r\n","import React from 'react';\r\n\r\nimport ICollapsibleProps from '../../../../TS/interfaces/ICollapsibleProps';\r\n\r\nconst MakeATen: React.FC<ICollapsibleProps> = (props) => {\r\n  return (\r\n    <p className={props.paragraphClassName}>\r\n      Make a Ten is a mental math strategy based on developing tens from the given operands by adding and subtracting\r\n      appropriate numbers. For example, to solve the addition problem<br />\r\n      <span className=\"description__paragraph--level-one\">8 + 5</span><br />\r\n      take <span className=\"red\">2</span> from the 5 and give it to the 8<br />\r\n      <span className=\"description__paragraph--level-one\">5 - <span className=\"red\">2</span> = 3</span><br />\r\n      <span className=\"description__paragraph--level-one\">8 + <span className=\"red\">2</span> = 10</span><br />\r\n      and then add the results<br />\r\n      <span className=\"description__paragraph--level-one\">10 + 3 = 13</span><br />\r\n      The opposite also possible: take <span className=\"red\">5</span> from the 8 and give it to the 5<br />\r\n      <span className=\"description__paragraph--level-one\">8 - <span className=\"red\">5</span> = 3</span><br />\r\n      <span className=\"description__paragraph--level-one\">5 + <span className=\"red\">5</span> = 10</span><br />\r\n      <span className=\"description__paragraph--level-one\">10 + 3 = 13</span><br />\r\n      <br />\r\n      In subtraction, Make a Ten can be used when subtrahend ones are bigger then minuend<br />\r\n      <span className=\"description__paragraph--level-one\">15 - 7</span><br />\r\n      decrease both operands by 5 to make a ten in the minuend<br />\r\n      <span className=\"description__paragraph--level-one\">(15 - <span className=\"red\">5</span>) - (7 - <span className=\"red\">5</span>) = 10 - 2</span><br />\r\n      and then subtract the remined <span className=\"red\">2</span>\r\n      <span className=\"description__paragraph--level-one\">10 - 2 = 8</span>\r\n    </p>\r\n  );\r\n};\r\n\r\nexport default MakeATen;\r\n","import React from 'react';\r\n\r\nimport ICollapsibleProps from '../../../../TS/interfaces/ICollapsibleProps';\r\n\r\nconst Decomposing: React.FC<ICollapsibleProps> = (props) => {\r\n\treturn (\r\n\t\t<p className={props.paragraphClassName}>\r\n\t\t\tBreaking apart, or decomposing, is a universal strategy for mental addition and subtraction. The key point is\r\n\t\t\tdecomposing one of the addends into the tens and the ones and then add or subtract them sequentially.<br />\r\n\t\t\tFor example, to solve addition problem<br />\r\n\t\t\t<span className=\"description__paragraph--level-one\">43 + 35</span>\r\n\t\t\t<br />\r\n\t\t\tfirst decompose the 35 into <span className=\"red\">30</span> + <span className=\"red\">5</span>, then add both\r\n\t\t\tsequentially<br />\r\n\t\t\t<span className=\"description__paragraph--level-one\">\r\n\t\t\t\t43 + <span className=\"red\">30</span> = 73\r\n\t\t\t</span>\r\n\t\t\t<br />\r\n\t\t\tand then the remaining 5<br />\r\n\t\t\t<span className=\"description__paragraph--level-one\">\r\n\t\t\t\t73 + <span className=\"red\">5</span> = 78\r\n\t\t\t</span>\r\n\t\t\t<br />\r\n\t\t\t<br />\r\n\t\t\tTo subtract<br />\r\n\t\t\t<span className=\"description__paragraph--level-one\">43 - 15</span>\r\n\t\t\t<br />\r\n\t\t\tdecompose the 15 into <span className=\"red\">12</span> and <span className=\"red\">3</span>, then subtract first 3<br />\r\n\t\t\t<span className=\"description__paragraph--level-one\">\r\n\t\t\t\t43 - <span className=\"red\">3</span> = 40\r\n\t\t\t</span>\r\n\t\t\t<br />\r\n\t\t\tand then the remaining 12<br />\r\n\t\t\t<span className=\"description__paragraph--level-one\">\r\n\t\t\t\t40 - <span className=\"red\">12</span> = 28\r\n\t\t\t</span>\r\n\t\t\t<br />\r\n\t\t\tThe same example can be solved another way, using the same strategy<br />\r\n\t\t\t<span className=\"description__paragraph--level-one\">43 - 15</span>\r\n\t\t\t<br />\r\n\t\t\tdecompose the 15 into <span className=\"red\">10</span> and <span className=\"red\">5</span>, then subtract first 10<br />\r\n\t\t\t<span className=\"description__paragraph--level-one\">\r\n\t\t\t\t43 - <span className=\"red\">10</span> = 33\r\n\t\t\t</span>\r\n\t\t\t<br />\r\n\t\t\tand then the remaining 5<br />\r\n\t\t\t<span className=\"description__paragraph--level-one\">\r\n\t\t\t\t33 - <span className=\"red\">5</span> = 28\r\n\t\t\t</span>\r\n\t\t</p>\r\n\t);\r\n};\r\n\r\nexport default Decomposing;\r\n","import React from 'react';\r\n\r\nimport ICollapsibleProps from '../../../../TS/interfaces/ICollapsibleProps';\r\n\r\nconst EqualAddition: React.FC<ICollapsibleProps> = (props) => {\r\n\treturn (\r\n\t\t<p className={props.paragraphClassName}>\r\n\t\t\tEqual Additions Strategy based on the fact, that increasing both minuend and subtrahend by the same number\r\n\t\t\tresults in the same difference between them. Just add the appropriate number to both operands to round to the\r\n\t\t\tnearest tenth one of them<br />\r\n\t\t\t<span className=\"description__paragraph--level-one\">44 - 18</span><br />\r\n\t\t\tadd <span className=\"red\">2</span> to both operands<br />\r\n\t\t\t<span className=\"description__paragraph--level-one\">(44 + <span className=\"red\">2</span>) - (18 + <span className=\"red\">2</span>) =</span><br />\r\n\t\t\t<span className=\"description__paragraph--level-one\">46 - 20 = 26</span><br />\r\n\t\t\tAnother example<br />\r\n\t\t\t<span className=\"description__paragraph--level-one\">29 - 17</span><br />\r\n\t\t\tadd <span className=\"red\">1</span> to both operands<br />\r\n\t\t\t<span className=\"description__paragraph--level-one\">(29 + <span className=\"red\">1</span>) - (17 + <span className=\"red\">1</span>) =</span><br />\r\n\t\t\t<span className=\"description__paragraph--level-one\">30 - 18 = 12</span><br />\r\n\t\t</p>\r\n\t);\r\n};\r\n\r\nexport default EqualAddition;\r\n","import React from 'react';\r\n\r\nimport ICollapsibleProps from '../../../../TS/interfaces/ICollapsibleProps';\r\n\r\nconst Compensation: React.FC<ICollapsibleProps> = (props) => {\r\n\treturn (\r\n\t\t<p className={props.paragraphClassName}>\r\n\t\t\tCompensation is a mental math strategy for multi-digit addition that involves adjusting one of the addends to\r\n\t\t\tmake the equation easier to solve. So, to solve the equation<br />\r\n\t\t\t<span className=\"description__paragraph--level-one\">36 + 59</span>\r\n\t\t\t<br />\r\n\t\t\tFirst, since 59 is so close to <span className=\"red\">60</span>, add<br />\r\n\t\t\t<span className=\"description__paragraph--level-one\">\r\n\t\t\t\t36 + <span className=\"red\">60</span> = 96\r\n\t\t\t</span>\r\n\t\t\t<br />\r\n\t\t\tThis is easier to solve. Then, since extra <span className=\"red\">1</span> was added to the original equation,\r\n\t\t\tsubtract that <span className=\"red\">1</span> from the final answer.<br />\r\n\t\t\t<span className=\"description__paragraph--level-one\">\r\n\t\t\t\t96 - <span className=\"red\">1</span> = 95\r\n\t\t\t</span>\r\n\t\t\t<br />\r\n\t\t\tAnother example<br />\r\n\t\t\t<span className=\"description__paragraph--level-one\">118 + 23</span>\r\n\t\t\t<br />\r\n\t\t\tUsing compensation, add <span className=\"red\">2</span> to 118, and then add 23 to 120. It is easier<br />\r\n\t\t\t<span className=\"description__paragraph--level-one\">120 + 23 = 143</span>\r\n\t\t\t<br />\r\n\t\t\tThen, as <span className=\"red\">2</span> was added to 118, it should be subtracted from the resulted 143<br />\r\n\t\t\t<span className=\"description__paragraph--level-one\">\r\n\t\t\t\t143 - <span className=\"red\">2</span> = 141\r\n\t\t\t</span>\r\n\t\t</p>\r\n\t);\r\n};\r\n\r\nexport default Compensation;\r\n","import React from 'react';\r\n\r\nimport Collapsible from '../../collapsible/collapsible.component';\r\n\r\nimport CountingOn from '../math-theory/strategies/counting-on.component';\r\nimport MakeATen from '../math-theory/strategies/make-a-ten.component';\r\nimport Decomposing from '../math-theory/strategies/decomposing.component';\r\nimport EqualAddition from '../math-theory/strategies/equal-addition.component';\r\nimport Compensation from '../math-theory/strategies/compensation.component';\r\n\r\nimport ICollapsibleProps from '../../../TS/interfaces/ICollapsibleProps';\r\n\r\nconst Math: React.FC<ICollapsibleProps> = (props) => {\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<p className={props.paragraphClassName}>\r\n\t\t\t\tThere are several strategies for performing mental addition and subtraction:<br />\r\n\t\t\t</p>\r\n\t\t\t<Collapsible\r\n\t\t\t\ttitle=\"Counting On\"\r\n\t\t\t\tid=\"counting-on\"\r\n\t\t\t\tcollapsibleClassName=\"collapsible\"\r\n\t\t\t\ttitleClassName=\"collapsible__title collapsible__title--level-four\"\r\n\t\t\t\ticonBoxClassName=\"collapsible__icon-box collapsible__icon-box--level-four\"\r\n\t\t\t\ticonClassName=\"collapsible__icon--level-four\"\r\n\t\t\t\tcontent={\r\n\t\t\t\t\t<CountingOn\r\n\t\t\t\t\t\tparagraphClassName=\"description__paragraph description__paragraph--level-two\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t}\r\n\t\t\t\tborderBottom={false}\r\n\t\t\t/>\r\n\t\t\t<Collapsible\r\n\t\t\t\ttitle=\"Make A Ten\"\r\n\t\t\t\tid=\"make-a-ten\"\r\n\t\t\t\tcollapsibleClassName=\"collapsible\"\r\n\t\t\t\ttitleClassName=\"collapsible__title collapsible__title--level-four\"\r\n\t\t\t\ticonBoxClassName=\"collapsible__icon-box collapsible__icon-box--level-four\"\r\n\t\t\t\ticonClassName=\"collapsible__icon--level-four\"\r\n\t\t\t\tcontent={\r\n\t\t\t\t\t<MakeATen\r\n\t\t\t\t\t\tparagraphClassName=\"description__paragraph description__paragraph--level-two\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t}\r\n\t\t\t\tborderBottom={false}\r\n\t\t\t/>\r\n\t\t\t<Collapsible\r\n\t\t\t\ttitle=\"Decomposing\"\r\n\t\t\t\tid=\"decomposing\"\r\n\t\t\t\tcollapsibleClassName=\"collapsible\"\r\n\t\t\t\ttitleClassName=\"collapsible__title collapsible__title--level-four\"\r\n\t\t\t\ticonBoxClassName=\"collapsible__icon-box collapsible__icon-box--level-four\"\r\n\t\t\t\ticonClassName=\"collapsible__icon--level-four\"\r\n\t\t\t\tcontent={\r\n\t\t\t\t\t<Decomposing\r\n\t\t\t\t\t\tparagraphClassName=\"description__paragraph description__paragraph--level-two\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t}\r\n\t\t\t\tborderBottom={false}\r\n\t\t\t/>\r\n\t\t\t<Collapsible\r\n\t\t\t\ttitle=\"Equal Addition\"\r\n\t\t\t\tid=\"equal-addition\"\r\n\t\t\t\tcollapsibleClassName=\"collapsible\"\r\n\t\t\t\ttitleClassName=\"collapsible__title collapsible__title--level-four\"\r\n\t\t\t\ticonBoxClassName=\"collapsible__icon-box collapsible__icon-box--level-four\"\r\n\t\t\t\ticonClassName=\"collapsible__icon--level-four\"\r\n\t\t\t\tcontent={\r\n\t\t\t\t\t<EqualAddition\r\n\t\t\t\t\t\tparagraphClassName=\"description__paragraph description__paragraph--level-two\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t}\r\n\t\t\t\tborderBottom={false}\r\n\t\t\t/>\r\n\t\t\t<Collapsible\r\n\t\t\t\ttitle=\"Compensation\"\r\n\t\t\t\tid=\"compensation\"\r\n\t\t\t\tcollapsibleClassName=\"collapsible\"\r\n\t\t\t\ttitleClassName=\"collapsible__title collapsible__title--level-four\"\r\n\t\t\t\ticonBoxClassName=\"collapsible__icon-box collapsible__icon-box--level-four\"\r\n\t\t\t\ticonClassName=\"collapsible__icon--level-four\"\r\n\t\t\t\tcontent={\r\n\t\t\t\t\t<Compensation\r\n\t\t\t\t\t\tparagraphClassName=\"description__paragraph description__paragraph--level-two\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t}\r\n\t\t\t\tborderBottom={false}\r\n\t\t\t/>\r\n\t\t</React.Fragment>\r\n\t);\r\n};\r\n\r\nexport default Math;\r\n","import React from 'react';\r\n\r\nimport ICollapsibleProps from '../../../../TS/interfaces/ICollapsibleProps';\r\n\r\nconst UpToTen: React.FC<ICollapsibleProps> = (props) => {\r\n\treturn (\r\n\t\t<p className={props.paragraphClassName}>\r\n\t\t\tUp to ten is a most primitive type of problems, where all the count is happening within ten, and both operands\r\n\t\t\tare single digit numbers. This type of problems<br />\r\n\t\t\t<span className=\"description__paragraph--level-one\">4 + 3</span><br />\r\n\t\t\tcan be solved with own fingers using Counting On strategy.\r\n\t\t</p>\r\n\t);\r\n};\r\n\r\nexport default UpToTen;\r\n","import React from 'react';\r\n\r\nimport ICollapsibleProps from '../../../../TS/interfaces/ICollapsibleProps';\r\n\r\nconst SingleDigitOperands: React.FC<ICollapsibleProps> = (props) => {\r\n\treturn (\r\n\t\t<p className={props.paragraphClassName}>\r\n\t\t\tSingle digit operands is a type of problems, where both operands are single digit numbers. This type of problems<br />\r\n\t\t\t<span className=\"description__paragraph--level-one\">4 + 3</span><br />\r\n\t\t\tis better suit for training basic arithmetic skills and developing elementary math insights. Couunting on, Make\r\n\t\t\ta Ten, and Decomposing are possible solution strategies for this type of problems.\r\n\t\t</p>\r\n\t);\r\n};\r\n\r\nexport default SingleDigitOperands;\r\n","import React from 'react';\r\n\r\nimport ICollapsibleProps from '../../../../TS/interfaces/ICollapsibleProps';\r\n\r\nconst TwoAndSingleDigits: React.FC<ICollapsibleProps> = (props) => {\r\n\treturn (\r\n\t\t<p className={props.paragraphClassName}>\r\n\t\t\tA two-digit and a single digit is a type of problems, where single digit number is added to or subtracted from a\r\n\t\t\ttwo-digit number. Besides the addition numbers, this type of problems developes the skill of keeping in mind\r\n\t\t\tresulted tens and includ them into calculations.<br />\r\n\t\t\t<span className=\"description__paragraph--level-one\">27 + 5</span><br />\r\n\t\t\t<br />\r\n\t\t\tPossible solution strategies are:<br />\r\n\t\t\tCounting on<br />\r\n\t\t\tMake a ten<br />\r\n\t\t\tDecomposing<br />\r\n\t\t</p>\r\n\t);\r\n};\r\n\r\nexport default TwoAndSingleDigits;\r\n","import React from 'react';\r\n\r\nimport ICollapsibleProps from '../../../../TS/interfaces/ICollapsibleProps';\r\n\r\nconst TwoDigitAndTens: React.FC<ICollapsibleProps> = (props) => {\r\n\treturn (\r\n\t\t<p className={props.paragraphClassName}>\r\n\t\t\tA two-digit and a tens is a type of problems, where tens number is added to or subtracted from a two-digit\r\n\t\t\tnumber. This type of problems is designed to develop the skill of increasing any number buy any tens, which is\r\n\t\t\tleading-up to the base mental strategies, like decomposing.<br />\r\n\t\t\t<span className=\"description__paragraph--level-one\">77 + 60</span>\r\n\t\t</p>\r\n\t);\r\n};\r\n\r\nexport default TwoDigitAndTens;\r\n","import React from 'react';\r\n\r\nimport ICollapsibleProps from '../../../../TS/interfaces/ICollapsibleProps';\r\n\r\nconst TwoDigitOperands: React.FC<ICollapsibleProps> = (props) => {\r\n\treturn (\r\n\t\t<p className={props.paragraphClassName}>\r\n\t\t\tTwo-digits operands is the most common type of problems where any two-digits number combined with another\r\n\t\t\ttwo-digit number without any limits.<br />\r\n\t\t\t94 + 57<br />\r\n\t\t\t75 - 38<br />\r\n\t\t\tBecause of it's universality, all mental strategies can be used to solve problems of this type.\r\n\t\t</p>\r\n\t);\r\n};\r\n\r\nexport default TwoDigitOperands;\r\n","import React from 'react';\r\n\r\nimport ICollapsibleProps from '../../../../TS/interfaces/ICollapsibleProps';\r\n\r\nconst TwoDigitTidingUp: React.FC<ICollapsibleProps> = (props) => {\r\n\treturn (\r\n\t\t<p className={props.paragraphClassName}>\r\n\t\t\tTwo-digits tidying up is the variation of two-digits operands type of problems, where the ones of the one or\r\n\t\t\tboth operands are close to ten and can be rounded up.<br />\r\n\t\t\t68 + 54<br />\r\n\t\t\t32 + 79<br />\r\n\t\t\t56 - 38<br />\r\n\t\t\tDespite it can be solved using any mental strategies, this type of problems dedicated to train rounding up\r\n\t\t\tstrategies, such as Make a Ten, Equal addition, or Compensation.\r\n\t\t</p>\r\n\t);\r\n};\r\n\r\nexport default TwoDigitTidingUp;\r\n","import React from 'react';\r\n\r\nimport ICollapsibleProps from '../../../../TS/interfaces/ICollapsibleProps';\r\n\r\nconst TensWithinThousand: React.FC<ICollapsibleProps> = (props) => {\r\n\treturn (\r\n\t\t<p className={props.paragraphClassName}>\r\n\t\t\tTens within thousands is a type of problems, where tens number is added to or subtracted from a three-digit\r\n\t\t\tnumber. This type of problems is designed to develop the skill of increasing or decreasing any three-digit\r\n\t\t\tnumber by any tens, sometimes resulting in increasing or decreasing hundreds of the number. It helps to realise\r\n\t\t\tthe relationship between tens and hundreds, and is leading-up to the base mental strategies, like decomposing.<br />\r\n\t\t\t683 + 50<br />\r\n\t\t\t327 + 70<br />\r\n\t\t\t569 - 80<br />\r\n\t\t</p>\r\n\t);\r\n};\r\n\r\nexport default TensWithinThousand;\r\n","import React from 'react';\r\n\r\nimport ICollapsibleProps from '../../../../TS/interfaces/ICollapsibleProps';\r\n\r\nconst HundredsWithinThousand: React.FC<ICollapsibleProps> = (props) => {\r\n\treturn (\r\n\t\t<p className={props.paragraphClassName}>\r\n\t\t\tHundreds within thousands is a type of problems, where hundreds number is added to or subtracted from a three-digit\r\n\t\t\tnumber. This type of problems is designed to develop the skill of increasing or decreasing any three-digit\r\n\t\t\tnumber by any hundreds of the number. It helps to ease dealing with hundreds while processing addition and subtraction\r\n\t\t\tof three- or more digit numbers, and can be applied to any mental strategy.<br />\r\n\t\t\t723 + 200<br />\r\n\t\t\t458 + 300<br />\r\n\t\t\t834 - 300<br />\r\n\t\t</p>\r\n\t);\r\n};\r\n\r\nexport default HundredsWithinThousand;\r\n","export default __webpack_public_path__ + \"static/media/schema-arrows--small.3dd42adf.png\";","export default __webpack_public_path__ + \"static/media/shcema-arrows--big.ef03c2b2.png\";","import React from 'react';\r\n\r\nimport Collapsible from '../../collapsible/collapsible.component';\r\n\r\nimport UpToTen from './problem-types/up-to-ten.component';\r\nimport SingleDigitOperands from './problem-types/single-digit-operands.component';\r\nimport TwoAndSingleDigits from './problem-types/two-and-single-digits.component';\r\nimport TwoDigitsAndTens from './problem-types/two-digit-and-tens.component';\r\nimport TwoDigitsOperands from './problem-types/two-digit-operands.component';\r\nimport TwoDigitsTidingUp from './problem-types/two-digit-tidying-up.component';\r\nimport TensWithinThousand from './problem-types/tens-within-thousand.component';\r\nimport HundredsWithinThousand from './problem-types/hundreds-within-thousand.component';\r\n\r\nimport schemaSmallScreen from './schema-arrows--small.png';\r\nimport schemaBigScreen from './shcema-arrows--big.png';\r\n\r\nimport ICollapsibleProps from '../../../TS/interfaces/ICollapsibleProps';\r\n\r\nconst HowAdditionSubtractionWorks: React.FC<ICollapsibleProps> = (props) => {\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<p className={props.paragraphClassName}>\r\n\t\t\t\tThe application consists of the Settings part and the Problems part.<br />\r\n\t\t\t\tThe Problems part contains randomly generated problems, having specific problems characteristics, which can be\r\n\t\t\t\tpreassigned in settings part before generating.<br />\r\n\t\t\t\t<br />\r\n\t\t\t\tEach problem contains two numeric operands, addition or subtraction sign, equality sign and a numeric result.\r\n\t\t\t\tDepends on the specific setting, one of the numeric operands or the result is missing number, means it's an\r\n\t\t\t\tempty input field where the right answer should be input. If the answer is right it colors <b>white</b>, if it\r\n\t\t\t\tis wrong it colors{' '}\r\n\t\t\t\t<span className=\"three\">\r\n\t\t\t\t\t<b>red</b>\r\n\t\t\t\t</span>.\r\n\t\t\t</p>\r\n\t\t\t<picture>\r\n\t\t\t\t<source srcSet={`${schemaSmallScreen} 1.8x`} media=\"(max-width: 380px)\" />\r\n\t\t\t\t<source srcSet={`${schemaSmallScreen} 1.5x`} media=\"(max-width: 480px)\" />\r\n\t\t\t\t<source srcSet={`${schemaSmallScreen} 1.2x`} media=\"(max-width: 580px)\" />\r\n\t\t\t\t<source srcSet={`${schemaSmallScreen} 1x`} media=\"(max-width: 680px)\" />\r\n\t\t\t\t<source srcSet={`${schemaBigScreen} 1.5x`} media=\"(max-width: 940px)\" />\r\n\t\t\t\t<img className=\"description__image\" srcSet={`${schemaBigScreen} 1x`} alt=\"Full Logo\" />\r\n\t\t\t</picture>\r\n\t\t\t<p className=\"description__paragraph description__paragraph--level-two\">\r\n\t\t\t\tThe Settings part contains one or multiple settings selections, which assign the specific details for the\r\n\t\t\t\tproblems generating. Each setting selection provides option to set operation (addition or subtraction), missing\r\n\t\t\t\toperand (first operand, second one, result or random - alltogether in arbitrary sequence), possible problem type\r\n\t\t\t\t(described further), and quantity of problems needed to be generated. If one of the selections is not selected,\r\n\t\t\t\tor the quantity field remains empty or equal 0, the line of settings just skipping during problems generating.<br />\r\n\t\t\t\t<br />\r\n\t\t\t\tThere are several problem types for addition or subtraction in the application:<br />\r\n\t\t\t</p>\r\n\t\t\t<Collapsible\r\n\t\t\t\ttitle=\"Up To Ten\"\r\n\t\t\t\tid=\"up-to-ten\"\r\n\t\t\t\tcollapsibleClassName=\"collapsible\"\r\n\t\t\t\ttitleClassName=\"collapsible__title collapsible__title--level-four\"\r\n\t\t\t\ticonBoxClassName=\"collapsible__icon-box collapsible__icon-box--level-four\"\r\n\t\t\t\ticonClassName=\"collapsible__icon--level-four\"\r\n\t\t\t\tcontent={\r\n\t\t\t\t\t<UpToTen\r\n\t\t\t\t\t\tparagraphClassName=\"description__paragraph description__paragraph--level-two\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t}\r\n\t\t\t\tborderBottom={false}\r\n\t\t\t/>\r\n\t\t\t<Collapsible\r\n\t\t\t\ttitle=\"Single Digit Operands\"\r\n\t\t\t\tid=\"single-digit-operands\"\r\n\t\t\t\tcollapsibleClassName=\"collapsible\"\r\n\t\t\t\ttitleClassName=\"collapsible__title collapsible__title--level-four\"\r\n\t\t\t\ticonBoxClassName=\"collapsible__icon-box collapsible__icon-box--level-four\"\r\n\t\t\t\ticonClassName=\"collapsible__icon--level-four\"\r\n\t\t\t\tcontent={\r\n\t\t\t\t\t<SingleDigitOperands\r\n\t\t\t\t\t\tparagraphClassName=\"description__paragraph description__paragraph--level-two\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t}\r\n\t\t\t\tborderBottom={false}\r\n\t\t\t/>\r\n\t\t\t<Collapsible\r\n\t\t\t\ttitle=\"Two and Single Digits\"\r\n\t\t\t\tid=\"two-and-single-digits\"\r\n\t\t\t\tcollapsibleClassName=\"collapsible\"\r\n\t\t\t\ttitleClassName=\"collapsible__title collapsible__title--level-four\"\r\n\t\t\t\ticonBoxClassName=\"collapsible__icon-box collapsible__icon-box--level-four\"\r\n\t\t\t\ticonClassName=\"collapsible__icon--level-four\"\r\n\t\t\t\tcontent={\r\n\t\t\t\t\t<TwoAndSingleDigits\r\n\t\t\t\t\t\tparagraphClassName=\"description__paragraph description__paragraph--level-two\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t}\r\n\t\t\t\tborderBottom={false}\r\n\t\t\t/>\r\n\t\t\t<Collapsible\r\n\t\t\t\ttitle=\"Two Digits and Tens\"\r\n\t\t\t\tid=\"two-digits-and-tens\"\r\n\t\t\t\tcollapsibleClassName=\"collapsible\"\r\n\t\t\t\ttitleClassName=\"collapsible__title collapsible__title--level-four\"\r\n\t\t\t\ticonBoxClassName=\"collapsible__icon-box collapsible__icon-box--level-four\"\r\n\t\t\t\ticonClassName=\"collapsible__icon--level-four\"\r\n\t\t\t\tcontent={\r\n\t\t\t\t\t<TwoDigitsAndTens\r\n\t\t\t\t\t\tparagraphClassName=\"description__paragraph description__paragraph--level-two\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t}\r\n\t\t\t\tborderBottom={false}\r\n\t\t\t/>\r\n\t\t\t<Collapsible\r\n\t\t\t\ttitle=\"Two Digits Operands\"\r\n\t\t\t\tid=\"two-digits-operands\"\r\n\t\t\t\tcollapsibleClassName=\"collapsible\"\r\n\t\t\t\ttitleClassName=\"collapsible__title collapsible__title--level-four\"\r\n\t\t\t\ticonBoxClassName=\"collapsible__icon-box collapsible__icon-box--level-four\"\r\n\t\t\t\ticonClassName=\"collapsible__icon--level-four\"\r\n\t\t\t\tcontent={\r\n\t\t\t\t\t<TwoDigitsOperands\r\n\t\t\t\t\t\tparagraphClassName=\"description__paragraph description__paragraph--level-two\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t}\r\n\t\t\t\tborderBottom={false}\r\n\t\t\t/>\r\n\t\t\t<Collapsible\r\n\t\t\t\ttitle=\"Two Digits Tiding Up\"\r\n\t\t\t\tid=\"two-digits-tiding-up\"\r\n\t\t\t\tcollapsibleClassName=\"collapsible\"\r\n\t\t\t\ttitleClassName=\"collapsible__title collapsible__title--level-four\"\r\n\t\t\t\ticonBoxClassName=\"collapsible__icon-box collapsible__icon-box--level-four\"\r\n\t\t\t\ticonClassName=\"collapsible__icon--level-four\"\r\n\t\t\t\tcontent={\r\n\t\t\t\t\t<TwoDigitsTidingUp\r\n\t\t\t\t\t\tparagraphClassName=\"description__paragraph description__paragraph--level-two\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t}\r\n\t\t\t\tborderBottom={false}\r\n\t\t\t/>\r\n\t\t\t<Collapsible\r\n\t\t\t\ttitle=\"Tens Within Thousand\"\r\n\t\t\t\tid=\"tens-within-thousand\"\r\n\t\t\t\tcollapsibleClassName=\"collapsible\"\r\n\t\t\t\ttitleClassName=\"collapsible__title collapsible__title--level-four\"\r\n\t\t\t\ticonBoxClassName=\"collapsible__icon-box collapsible__icon-box--level-four\"\r\n\t\t\t\ticonClassName=\"collapsible__icon--level-four\"\r\n\t\t\t\tcontent={\r\n\t\t\t\t\t<TensWithinThousand\r\n\t\t\t\t\t\tparagraphClassName=\"description__paragraph description__paragraph--level-two\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t}\r\n\t\t\t\tborderBottom={false}\r\n\t\t\t/>\r\n\t\t\t<Collapsible\r\n\t\t\t\ttitle=\"Hundreds Within Thousand\"\r\n\t\t\t\tid=\"hundreds-within-thousand\"\r\n\t\t\t\tcollapsibleClassName=\"collapsible\"\r\n\t\t\t\ttitleClassName=\"collapsible__title collapsible__title--level-four\"\r\n\t\t\t\ticonBoxClassName=\"collapsible__icon-box collapsible__icon-box--level-four\"\r\n\t\t\t\ticonClassName=\"collapsible__icon--level-four\"\r\n\t\t\t\tcontent={\r\n\t\t\t\t\t<HundredsWithinThousand\r\n\t\t\t\t\t\tparagraphClassName=\"description__paragraph description__paragraph--level-two\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t}\r\n\t\t\t\tborderBottom={false}\r\n\t\t\t/>\r\n\t\t</React.Fragment>\r\n\t);\r\n};\r\n\r\nexport default HowAdditionSubtractionWorks;\r\n","import React from 'react';\r\n\r\nimport Collapsible from '../../collapsible/collapsible.component';\r\nimport Settings from '../../settings/settings.component';\r\nimport Math from '../../descriptions/addition-subtraction/math.component';\r\nimport HowAdditionSubtractionWorks from '../../descriptions/addition-subtraction/how-addition-subtraction-works.component';\r\n\r\ninterface IProps { };\r\n\r\nconst Header: React.FC<IProps> = (props) => {\r\n\tconst collapsibleContent = () => {\r\n\t\treturn (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t<p className=\"description__paragraph description__paragraph--level-one\">\r\n\t\t\t\t\tThe application is dedicated to developing mental addition and subtraction skills, which achieves via\r\n\t\t\t\t\tsolving problems with different levels of complexity.<br />\r\n\t\t\t\t</p>\r\n\t\t\t\t<Collapsible\r\n\t\t\t\t\ttitle=\"Math Theory\"\r\n\t\t\t\t\tid=\"math\"\r\n\t\t\t\t\tcollapsibleClassName=\"collapsible\"\r\n\t\t\t\t\ttitleClassName=\"collapsible__title collapsible__title--level-two\"\r\n\t\t\t\t\ticonBoxClassName=\"collapsible__icon-box collapsible__icon-box--level-two\"\r\n\t\t\t\t\ticonClassName=\"collapsible__icon--level-two\"\r\n\t\t\t\t\tcontent={\r\n\t\t\t\t\t\t<Math\r\n\t\t\t\t\t\t\tparagraphClassName=\"description__paragraph description__paragraph--level-two\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t}\r\n\t\t\t\t\tborderBottom={false}\r\n\t\t\t\t/>\r\n\t\t\t\t<Collapsible\r\n\t\t\t\t\ttitle=\"How it works\"\r\n\t\t\t\t\tid=\"how-it-works\"\r\n\t\t\t\t\tcollapsibleClassName=\"collapsible\"\r\n\t\t\t\t\ttitleClassName=\"collapsible__title collapsible__title--level-two\"\r\n\t\t\t\t\ticonBoxClassName=\"collapsible__icon-box collapsible__icon-box--level-two\"\r\n\t\t\t\t\ticonClassName=\"collapsible__icon--level-two\"\r\n\t\t\t\t\tcontent={\r\n\t\t\t\t\t\t<HowAdditionSubtractionWorks\r\n\t\t\t\t\t\t\tparagraphClassName=\"description__paragraph description__paragraph--level-two\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t}\r\n\t\t\t\t\tborderBottom={false}\r\n\t\t\t\t/>\r\n\t\t\t</React.Fragment>\r\n\t\t);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<header className=\"header\">\r\n\t\t\t<h1 className=\"header__title\">Addition and Subtraction</h1>\r\n\t\t\t<h3 className=\"header__title--small\">boost your skills of addition and subtraction</h3>\r\n\t\t\t<Collapsible\r\n\t\t\t\ttitle=\"About\"\r\n\t\t\t\tid=\"about\"\r\n\t\t\t\tcollapsibleClassName=\"collapsible\"\r\n\t\t\t\ttitleClassName=\"collapsible__title collapsible__title--level-one\"\r\n\t\t\t\ticonBoxClassName=\"collapsible__icon-box collapsible__icon-box--level-one\"\r\n\t\t\t\ticonClassName=\"collapsible__icon--level-one\"\r\n\t\t\t\tcontent={collapsibleContent()}\r\n\t\t\t\tborderBottom={false}\r\n\t\t\t/>\r\n\t\t\t<Settings />\r\n\t\t</header>\r\n\t);\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nimport content from '../../table.content';\r\n\r\ninterface IProps {\r\n  className: string;\r\n  number: string;\r\n};\r\n\r\nconst Number: React.FC<IProps> = props => {\r\n\r\n  return (\r\n    <span className={props.className}>\r\n      {Array.from(props.number).map((digit: string, index: number) => (\r\n        <span className={`${content.styles[parseInt(digit)]}`} key={index}>\r\n          {digit}\r\n        </span>\r\n      ))}\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default Number;","import React from 'react';\r\n\r\ninterface IProps {\r\n\tclassName: string;\r\n\tsign: string;\r\n};\r\n\r\nconst Sign: React.FC<IProps> = (props) => {\r\n\treturn <span className={props.className}>{props.sign}</span>;\r\n};\r\n\r\nexport default Sign;\r\n","import React from 'react';\r\n\r\nimport { useAppDispatch, useAppSelector } from '../../../redux/hooks';\r\nimport {\r\n\tsetInputValue,\r\n\t// clearAllProblemsAndSettings,\r\n\tproblems,\r\n} from '../../../redux/addition-subtraction/additionSubtractionSlice';\r\n\r\nimport Number from '../../number/number.component';\r\nimport Sign from '../../sign/sign.component';\r\n\r\nimport handleKeyDown from '../../../utils/handle-key-down-event/handle-key-down-event';\r\n\r\nimport IProblem from '../../../TS/interfaces/IProblem';\r\n\r\ninterface IProps {\r\n\tstateIndex: number,\r\n\tcontent: IProblem[],\r\n};\r\n\r\nconst Problem: React.FC<IProps> = (props) => {\r\n\r\n\tconst stateProblems = useAppSelector(problems);\r\n\r\n\tconst dispatch = useAppDispatch();\r\n\t\r\n\tconst processKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n\t\thandleKeyDown(e);\r\n\t}\r\n\r\n\tconst handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n\t\tdispatch(setInputValue({ index: props.stateIndex, value: e.currentTarget.value }));\r\n\r\n\t\t// const totalAnswers = stateProblems.filter((problem) => problem[problem.findIndex(val => val.type === \"input\")].value !== problem[problem.findIndex(val => val.type === \"result\")].value);\r\n\r\n\t\t// if (totalAnswers.length) dispatch(setInputValue({ index: props.stateIndex, value: e.currentTarget.value }));\r\n\t\t// if (!totalAnswers.length) dispatch(clearAllProblemsAndSettings());\r\n\t}\r\n\r\n\tconst renderProblem = props.content.map((operand: { type: string, value: string }, i) => {\r\n\t\tlet renderedElement: any = null;\r\n\r\n\t\tswitch (operand.type) {\r\n\t\t\tcase 'operand':\r\n\t\t\t\trenderedElement = <Number number={operand.value} className=\"problem__digit\" key={`problem__digit-${i}`} />;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'sign':\r\n\t\t\t\trenderedElement = <Sign sign={operand.value} className=\"problem__sign\" key={`problem__sign-${i}`} />;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'input':\r\n\r\n\t\t\t\trenderedElement = (\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\tkey={`problem__input-${i}`}\r\n\t\t\t\t\t\t// key={props.content.map((op) => op.value).reduce((res: string, v: string,) => res + v)}\r\n\t\t\t\t\t\ttype=\"number\"\r\n\t\t\t\t\t\tpattern=\"[0-9]*\"\r\n\t\t\t\t\t\tinputMode=\"numeric\"\r\n\t\t\t\t\t\tclassName=\"problem__input\"\r\n\t\t\t\t\t\tstep=\"1\"\r\n\t\t\t\t\t\ttitle=\"\"\r\n\t\t\t\t\t\tplaceholder=\" \"\r\n\t\t\t\t\t\tmin={operand.value}\r\n\t\t\t\t\t\tmax={operand.value}\r\n\t\t\t\t\t\tvalue={stateProblems[props.stateIndex][5].value}\r\n\t\t\t\t\t\t// defaultValue={''}\r\n\t\t\t\t\t\tonKeyDown={processKeyDown}\r\n\t\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\t\tautoComplete=\"off\" //for dropping the value when cached by browser\r\n\t\t\t\t\t/>\r\n\t\t\t\t);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\treturn renderedElement;\r\n\t});\r\n\r\n\treturn <div className=\"problem\">{renderProblem}</div>;\r\n};\r\n\r\nexport default Problem;\r\n","import React from 'react';\r\n\r\nimport { useAppSelector } from '../../../redux/hooks';\r\nimport {\r\n\tcolumns,\r\n\tproblems,\r\n} from '../../../redux/addition-subtraction/additionSubtractionSlice';\r\n\r\nimport Problem from '../problem/problem.component';\r\n\r\nimport IProblem from '../../../TS/interfaces/IProblem';\r\n\r\ninterface IProps {\r\n\r\n};\r\n\r\nconst Problems: React.FC<IProps> = (props) => {\r\n\r\n\tconst stateProblems = useAppSelector(problems);\r\n\tconst stateColumns = useAppSelector(columns);\r\n\r\n\t/**\r\n\t * The following algorithm explained in details at:\r\n\t * https://stackoverflow.com/questions/42391499/react-render-new-row-every-4th-column\r\n\t */\r\n\r\n\t/**\r\n\t * array of @cols elements, where @cols is the number of rows needed\r\n\t * @arr <Array> - the given array of rendering elements\r\n\t * @cols <Number> - the number of columns in a row\r\n\t */\r\n\tconst rows = (arr: IProblem[][], cols: number) => [...Array(Math.ceil(arr.length / cols))];\r\n\r\n\t// chunk the problems into the array of rows\r\n\tconst contentRows = (arr: IProblem[][], cols: number) => rows(arr, cols).map((row, idx: number) => arr.slice(idx * cols, idx * cols + cols));\r\n\r\n\tconst getContent = contentRows(stateProblems, stateColumns).map((row, i) => (\r\n\r\n\t\t<div key={i} className=\"problem__row\">\r\n\t\t\t{row.map((problem, j) => <Problem key={j} content={problem} stateIndex={stateProblems.indexOf(problem)} />)}\r\n\t\t</div>\r\n\t));\r\n\r\n\treturn <div className=\"problems\">{getContent}</div>;\r\n};\r\n\r\nexport default Problems;\r\n","import React from 'react';\r\n\r\nimport NavigationBar from '../../components/navigation/navigation-bar/navigation-bar.component';\r\nimport Header from '../../components/headers/addition-subtraction/header.component';\r\nimport Problems from '../../components/addition-subtraction/problems/problems.component';\r\nimport Footer from '../../components/footer/footer.component';\r\n\r\ninterface IProps { };\r\n\r\nconst AdditionSubtraction: React.FC<IProps> = (props) => {\r\n\r\n\t/**\r\n\t * Single state hook useState for all the state properties\r\n\t * \r\n\t * PROBLEM PARAMETRES: \r\n\t * operation: <addition>, <subtraction>\r\n\t * missing: <result>, <missingFirst>, <missingLast>, <random>\r\n\t * type: <up-to-10>, ...\r\n\t * numberOfOperands: <Number>\r\n\t * quantity: <Number>\r\n\t */\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<NavigationBar />\r\n\t\t\t<main className=\"problem__main main\">\r\n\t\t\t\t<Header />\r\n\t\t\t\t<Problems />\r\n\t\t\t</main>\r\n\t\t\t<Footer />\r\n\t\t</React.Fragment>\r\n\t);\r\n};\r\n\r\nexport default AdditionSubtraction;\r\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport MultiplicationTab from './pages/multiplication-tab/multiplication-tab.page';\nimport AdditionSubtraction from './pages/addition-subtraction/addition-subtraction.page';\n\n/**\n * router adapted for github pages, see detailed eplanations at:\n * https://stackoverflow.com/questions/57883297/deploying-reactjs-website-on-github-pages-with-routing-results-in-404-error-on-r\n * https://github.com/facebook/create-react-app/issues/1765\n */\nconst Routes = () => {\n\treturn (\n\t\t<Switch>\n\t\t\t<Route path=\"/\" exact component={AdditionSubtraction} />\n\t\t\t<Route path=\"/multiplication-tab\" exact component={MultiplicationTab} />\n\t\t\t<Route path=\"/addition-subtraction\" exact component={AdditionSubtraction} />\n\t\t</Switch>\n\t);\n};\n\nexport default Routes;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport { store } from './redux/store';\n\nimport './index.scss';\n\nimport Routes from './routes';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Routes />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}